package kr.or.ddit.ddtown.service.admin.blacklist;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.mapper.admin.blacklist.IBlacklistMapper;
import kr.or.ddit.ddtown.mapper.admin.report.IReportMapper;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.blacklist.BlacklistVO;
import kr.or.ddit.vo.report.ReportVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class BlacklistSerivceImpl implements IBlacklistService{

	@Autowired
	public IBlacklistMapper blacklistMapper;
	
	@Autowired
    private IReportMapper reportMapper;
	
	//목록페이지
	@Override
	public List<BlacklistVO> blackList(PaginationInfoVO<BlacklistVO> pagingVO) {		
		return blacklistMapper.blackList(pagingVO);
	}
	//상세페이지
	@Override
	public BlacklistVO blackDetail(int banNo) {	
		return blacklistMapper.blackDetail(banNo);
	}
	//등록하기
	@Override
	public ServiceResult blackSignup(BlacklistVO blacklistVO) throws Exception {
		//회원인지 아닌지 체크
		int checkMemberId = blacklistMapper.checkMemberId(blacklistVO.getMemUsername());
		
		if(checkMemberId == 0 ) {
			return ServiceResult.NOTEXIST;
		}
		
		int status = blacklistMapper.blackSignup(blacklistVO);
		if(status > 0) {
			 return ServiceResult.OK;	//성공
		}else {
			return ServiceResult.FAILED;//실패
		}

	}
	//신고상세에서 블랙리스트 추가 누를시 회원 아이디 가지고 오기
	@Override
	public String getUsernameReportNo(Integer reportNo) {

		return reportMapper.getUsernameReportNo(reportNo);
	}
	//수정하기
	@Override
	public ServiceResult blackUpdate(BlacklistVO blacklistVO) throws Exception {
		int status = blacklistMapper.blackUpdate(blacklistVO);
		if(status > 0) {
			return ServiceResult.OK;
		}else {
			return ServiceResult.FAILED;
		}
		
	}
	//해제(삭제)하기
	@Override
	public ServiceResult blackDelete(int banNo) {
		ServiceResult result = null;
		
		int status = blacklistMapper.blackDelete(banNo);
		
		if(status >0) {
			result = ServiceResult.OK;
		}else {
			result = ServiceResult.FAILED;
		}
		return result;
	}
	//블랙리스트 목록 수(비활성화 포함)
	@Override
	public int selectBlacklistCount(PaginationInfoVO<BlacklistVO> pagingVO) {
		
		return blacklistMapper.selectBlacklistCount(pagingVO);
	}
	//현재 블랙리스트 수
	@Override
	public int blacklistCnt() {
		return blacklistMapper.blacklistCnt();
	}
	@Override
	public Map<String, Integer> blackReasonCnts() {
		List<Map<String, Object>> blackReasonCnts = blacklistMapper.blackReasonCnts();
		Map<String, Integer> reasonCnts = new HashMap<>();
		
		reasonCnts.put("스팸", 0); // 실제 코드명 또는 한글명으로 매핑
		reasonCnts.put("욕설", 0);
		reasonCnts.put("음란물", 0);
		reasonCnts.put("기타", 0);
		
		for (Map<String, Object> row : blackReasonCnts) {
			log.info(">>>> (2) 현재 처리 중인 row: {}", row);
            String reasonCode = (String) row.get("reasonCode"); // DB에서 넘어온 사유 코드
            Long count = (Long) row.get("count"); // DB에서 넘어온 COUNT 값 (Long으로 넘어올 수 있음)

            String reasonName = "";
            if ("BRC001".equals(reasonCode)) {
            	reasonName = "스팸"; // JSP에서 쓸 이름
            } else if ("BRC002".equals(reasonCode)) {
            	reasonName = "욕설"; 
            } else if ("BRC003".equals(reasonCode)) {
            	reasonName = "음란물"; 
            } else if ("BRC004".equals(reasonCode)) {
            	reasonName = "기타"; 
            }

            if (!reasonName.isEmpty()) { // 매핑된 이름이 있을 경우에만 put
            	 log.info(">>>> (4) reasonCnts에 추가됨: {}: {}", reasonName, count.intValue());
            	reasonCnts.put(reasonName, count.intValue()); 
            }
        }
        return reasonCnts;
	}

}
