package kr.or.ddit.ddtown.service.goods;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ddtown.mapper.goods.IGoodsMapper;
import kr.or.ddit.ddtown.service.file.IFileService;
import kr.or.ddit.vo.file.AttachmentFileDetailVO;
import kr.or.ddit.vo.goods.goodsNoticeVO;
import kr.or.ddit.vo.goods.goodsOptionVO;
import kr.or.ddit.vo.goods.goodsStockVO;
import kr.or.ddit.vo.goods.goodsVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class GoodsServiceImpl implements IGoodsService {
	
	@Autowired
	private IGoodsMapper mapper;
	
	@Autowired
	private IFileService fileService;
	
	//상품 리스트 가져오기
	@Override
	public List<goodsVO> goodsList() {	
		log.info("goodsList() 서비스 호출! 상품 목록 조회 시작!");
		//1. DB에서 기본 상품 목록 조회
		List<goodsVO> itemList = mapper.goodsList();
		
		//2. 각 상품에 대한 대표 이미지 설정
		if(itemList != null && !itemList.isEmpty()) {
			for (goodsVO items : itemList) {
				if (items.getFileGroupNo() != null && items.getFileGroupNo() > 0) {
					//파일 서비스를 통해서 파일 그룹 대표 이미지 정보 가져오기!
					AttachmentFileDetailVO imageFiles;
					try {
						imageFiles = fileService.getRepresentativeFileByGroupNo(items.getFileGroupNo());
					
						if(imageFiles != null && imageFiles.getWebPath() != null && !imageFiles.getWebPath().isEmpty()) {
							//goodsVO에 있는 representativeImageUrl 필드에 웹 경로를 설정!!!
							items.setRepresentativeImageUrl(imageFiles.getWebPath());
							log.debug("상품 번호 {}의 대표 이미지 경로 설정: {}", items.getGoodsNo(), imageFiles.getWebPath());
						} else {
							//대표 이미지를 못 찾았거나 웹 경로가 없는 경우!
							items.setRepresentativeImageUrl(null);
							log.warn("상품 번호 {} (fileGroupNo: {})에 대한 대표 이미지를 찾을 수 없거나 웹 경로가 없습니다.", items.getGoodsNo(), items.getFileGroupNo());
						} 
					} catch (Exception e) {
						log.error("상품 번호 {}의 대표 이미지 조회 중 오류발생!: {}", items.getGoodsNo(), e.getMessage());
						items.setRepresentativeImageUrl(null);
					}
					
				} else {
					//상품에 연결된 파일 그룹이 없는 경우!! (파일이 없는 경우..!)
					items.setRepresentativeImageUrl(null);
				}
			}
		}
		log.info("goodsList() 서비스 - 상품 목록 조회 및 대표 이미지 설정 완료! {}", (itemList != null ? itemList.size() : 0));
		return itemList;
	}
	
	//굿즈 개별 상세 불러오기
	@Override
	public goodsVO getGoodsDetail(int goodsNo) {
		log.info("서비스 계층 getGoodsDetail - 받은 goodsNo: {}", goodsNo);
		goodsVO goodsDetail = mapper.getGoodsDetail(goodsNo); //DB에서 기본 상품 정보 조회
		
		if(goodsDetail != null) {
			//1.대표 이미지 정보 설정
			if(goodsDetail.getFileGroupNo() != null && goodsDetail.getFileGroupNo() > 0) {
				try {
					AttachmentFileDetailVO imageFiles = fileService.getRepresentativeFileByGroupNo(goodsDetail.getFileGroupNo());
					if(imageFiles != null && imageFiles.getWebPath() != null && !imageFiles.getWebPath().isEmpty()) {
						goodsDetail.setRepresentativeImageUrl(imageFiles.getWebPath());
						
						log.debug("상품 번호 {}의 상세 - 대표 이미지 경로!: {}", goodsDetail.getGoodsNo(), imageFiles.getWebPath());
					} else {
						goodsDetail.setRepresentativeImageUrl(null);
					}
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
		}
		
		return mapper.getGoodsDetail(goodsNo);
	}
	
	//옵션 리스트 가져오기
	@Override
	public List<goodsOptionVO> optionList(int goodsNo) {
		return mapper.optionList(goodsNo);
	}
	
	//굿즈 상태 코드 가져오기
	@Override
	public List<goodsVO> getgoodsStatus() {
		return mapper.getgoodsStatus();
	}
	
	//굿즈 현재 총재고 가져오기
	@Override
	public List<goodsStockVO> getgoodsTotalStock() {
		return mapper.getgoodsTotalStock();
	}

}
