package kr.or.ddit.ddtown.service.concert.schedule;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.mapper.concert.schedule.IConcertScheduleMapper;
import kr.or.ddit.ddtown.service.file.IFileService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.concert.ConcertVO;
import kr.or.ddit.vo.file.AttachmentFileDetailVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class ConcertServiceImpl implements IConcertService { 

    @Autowired
    private IConcertScheduleMapper concertMapper; 
    
    @Autowired
    private IFileService fileService;

    @Override
    public List<ConcertVO> selectConcertList(PaginationInfoVO<ConcertVO> pagingVO) throws Exception {
        log.info("selectConcertList() 실행...!");
        List<ConcertVO> list = concertMapper.selectConcertList(pagingVO);
        if (list != null) {
            for (ConcertVO concert : list) {
                if (concert.getFileGroupNo() != null && concert.getFileGroupNo() > 0) {
                    AttachmentFileDetailVO repFile = fileService.getRepresentativeFileByGroupNo(concert.getFileGroupNo());
                    if (repFile != null && repFile.getWebPath() != null) {
                        // ConcertVO에 대표 이미지 경로 설정
                        concert.setRepresentativeImageUrl(repFile.getWebPath());
                        log.debug("콘서트 ID {}: 대표 이미지 경로 {}", concert.getConcertNo(), repFile.getWebPath());
                    }
                }
            }
        }
        return list;
    }

    @Override
    public int selectConcertCount(PaginationInfoVO<ConcertVO> pagingVO) throws Exception {
    	log.info("selectConcertCount() 실행...!");
        return concertMapper.selectConcertCount(pagingVO);
    }

    @Override
    public ConcertVO selectSchedule(int concertNo) throws Exception {
    	
    	log.info("selectSchedule() 실행...! 조회할 콘서트 번호: {}", concertNo);
        ConcertVO concertVO = concertMapper.selectSchedule(concertNo);
        if (concertVO != null && concertVO.getFileGroupNo() != null && concertVO.getFileGroupNo() > 0) {
            // 상세 조회 모든 파일목록 가져오기
            List<AttachmentFileDetailVO> files = fileService.getFileDetailsByGroupNo(concertVO.getFileGroupNo());
            concertVO.setAttachmentFileList(files);
            log.debug("콘서트 ID {}: 파일 그룹 {}의 파일 {}개 로드", concertNo, concertVO.getFileGroupNo(), files.size());
        }
        return concertVO;
    }

    @Transactional
    @Override
    public ServiceResult insertSchedule(ConcertVO concertVO) throws Exception {
    	log.info("insertSchedule() 실행...!");
    	
        int row = concertMapper.insertSchedule(concertVO);
        log.info("insertSchedule() 실행 후 concertNo : " + concertVO.getConcertNo());
        log.info("concertVO : " + concertVO);
        if (row > 0) {
            log.info("콘서트 일정 등록 성공: {}", concertVO.getConcertNm());
            return ServiceResult.OK;
        }
        log.warn("콘서트 일정 등록 실패: {}", concertVO.getConcertNm());
        return ServiceResult.FAILED;
    }

    @Transactional
    @Override
    public ServiceResult updateSchedule(ConcertVO concertVO) throws Exception {
    	log.info("updateSchedule() 실행...!");
    	
        int row = concertMapper.updateSchedule(concertVO);
        if (row > 0) {
	        log.info("콘서트 일정 수정 성공 (번호: {})", concertVO.getConcertNo());
	        return ServiceResult.OK;
        }
        log.warn("콘서트 일정 수정 실패 (번호: {}): {}", concertVO.getConcertNo());
        return ServiceResult.FAILED;
    }

    @Transactional
    @Override
    public ServiceResult deleteSchedule(int concertNo) throws Exception {
    	log.info("deleteSchedule() 실행...!");
        
        int row = concertMapper.deleteSchedule(concertNo);
        if (row > 0) {
            log.info("콘서트 일정 삭제 성공 (번호: {})", concertNo);
            return ServiceResult.OK;
        }
        log.warn("콘서트 일정 삭제 실패 (번호: {})", concertNo);
        return ServiceResult.FAILED;
    }
}