package kr.or.ddit.ddtown.service.admin.artist;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.mapper.IUserMapper;
import kr.or.ddit.ddtown.mapper.admin.artist.AdminArtistMapper;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.artist.ArtistVO;
import kr.or.ddit.vo.user.PeopleAuthVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class AdminArtistServiceImpl implements IAdminArtistService {

	@Value("${kr.or.ddit.upload.path}")
	private String uploadPath;
	@Autowired
	private BCryptPasswordEncoder pe;
	
	@Autowired
	private AdminArtistMapper artistMapper;
	
	@Autowired
	private IUserMapper userMapper; 
	
	@Override
	public List<ArtistVO> getArtistList(PaginationInfoVO<ArtistVO> pagingVO) {
		return artistMapper.getArtistList(pagingVO);
	}

	@Override
	public int getTotalRecord(PaginationInfoVO<ArtistVO> pagingVO) {
		return artistMapper.getTotalRecord(pagingVO);
	}

	@Override
	public ArtistVO getArtistDetail(int artNo) {
		return artistMapper.getArtistDetail(artNo);
	}
	
	// 아티스트 수정
	@Transactional
	@Override
	public ServiceResult updateArtist(ArtistVO artistVO) {
		log.info("artistVO : {}", artistVO);
		ServiceResult result = null;
		
		// 이미지 처리
		MultipartFile img = artistVO.getProfileImg();
		if(img != null) {
			// 처리전 기존 이미지파일 삭제 
			try {
				String savePath = artistVO.getArtProfileImg();
				log.info(savePath);
				if(StringUtils.isNotBlank(savePath)) {
					savePath = savePath.replace("/upload", uploadPath);
					log.info("파일경로 -> :" + savePath);
					
					File file = new File(savePath);
					if(file.exists()) {
						log.info("파일 존재함");
						file.delete();
					}
				}
				// 새로운 이미지 경로
				String imgUrl = uploadImg(img);
				artistVO.setArtProfileImg(imgUrl);
			} catch (IllegalStateException | IOException e) {
				return ServiceResult.FAILED;
			}
		}
		
		// 아티스트 테이블 수정
		int status = artistMapper.updateArtist(artistVO);
		if(status > 0) {
			// 아티스트 people 테이블 수정
			String encodedPw = pe.encode(artistVO.getMemberVO().getPassword());
			artistVO.getMemberVO().setPassword(encodedPw);
			status = userMapper.updateArtistPeople(artistVO.getMemberVO());
			if(status > 0) {
				// 아티스트 member 테이블 수정
				artistVO.getMemberVO().setMemNicknm(artistVO.getArtNm());
				status = userMapper.updateArtistMember(artistVO.getMemberVO());
				result = status > 0 ? ServiceResult.OK : ServiceResult.FAILED;
			}
		}
		return result;
	}
	
	@Transactional
	@Override
	public ServiceResult registArtist(ArtistVO artistVO) {
		log.info("artistVO : {}", artistVO);
		ServiceResult result = null;
		// people 테이블 데이터 추가
		String encodedPw = pe.encode(artistVO.getMemberVO().getPassword());
		artistVO.getMemberVO().setPassword(encodedPw);
		int status = userMapper.registArtistPeople(artistVO.getMemberVO());
		if(status > 0) {
			// auth 추가
			PeopleAuthVO paVO = new PeopleAuthVO();
			paVO.setUsername(artistVO.getMemberVO().getUsername());
			paVO.setAuth("ROLE_MEMBER");
			userMapper.registArtistAuth(paVO);
			paVO.setAuth("ROLE_ARTIST");
			userMapper.registArtistAuth(paVO);
			// member 테이블 데이터 추가
			artistVO.getMemberVO().setMemNicknm(artistVO.getArtNm());
			status = userMapper.registArtistMember(artistVO.getMemberVO());
			if(status > 0) {
				// img 업로드
				MultipartFile img = artistVO.getProfileImg();
				String savePath;
				try {
					savePath = uploadImg(img);
					artistVO.setArtProfileImg(savePath);
				} catch (IllegalStateException | IOException e) {
					return ServiceResult.FAILED;
				}
				// artist테이블 추가
				artistVO.setMemUsername(artistVO.getMemberVO().getUsername());
				status = artistMapper.registArtist(artistVO);
				result = status > 0 ? ServiceResult.OK : ServiceResult.FAILED;
			}
		}
		
		return result;
	}
	
	@Transactional
	@Override
	public ServiceResult deleteArtist(ArtistVO artistVO) {
		ServiceResult result = null;
		// 아티스트 은퇴여부 y 변경
		int status = artistMapper.deleteArtist(artistVO);
		// 멤버 코드 'MSC002' 변경
		if(status > 0) {
			status = userMapper.deleteArtistMember(artistVO.getMemUsername());
		}
		// 사용자 탈퇴 여부 'y' 변경
		if(status > 0) {
			status = userMapper.deleteArtistPeople(artistVO.getMemUsername()); 
			result = status > 0 ? ServiceResult.OK : ServiceResult.FAILED;
		}
		return result;	
	}
	

	
	private String uploadImg(MultipartFile img) throws IllegalStateException, IOException {
		String savePath = uploadPath + "/profile/artist";
		File file = new File(savePath);
		if(!file.exists()) {
			file.mkdirs();
		}
		
		if(StringUtils.isNotBlank(img.getOriginalFilename())) {
			String filename = UUID.randomUUID().toString();
			filename += "_" + img.getOriginalFilename();
			savePath += "/" + filename;
			img.transferTo(new File(savePath));
		}
		return savePath.replace("C:", "");
		
	}

	
}
