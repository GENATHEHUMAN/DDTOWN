package kr.or.ddit.ddtown.service.alert;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.ddtown.mapper.alert.IAlertMapper;
import kr.or.ddit.ddtown.mapper.common.ICommonCodeMapper;
import kr.or.ddit.vo.alert.AlertReceiverVO;
import kr.or.ddit.vo.alert.AlertSettingVO;
import kr.or.ddit.vo.alert.AlertVO;
import kr.or.ddit.vo.common.CommonCodeDetailVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class AlertServiceImpl implements IAlertService {
	
	@Autowired
	private IAlertMapper alertMapper;
	
	@Autowired
	private SimpMessagingTemplate messagingTemplate;
	
	@Autowired
	private ICommonCodeMapper commonCodeMapper;

	@Override
	@Transactional
	public void createAlert(AlertVO alert, List<String> recipientUsernames) throws Exception {
		log.info("createAlert() 실행...! 알림내용: {}", alert.getAlertContent());
		
		// 알림 정보 저장
		if(alert.getAlertCreateDate() == null) {
			alert.setAlertCreateDate(new Timestamp(System.currentTimeMillis()));		// 알림 밀리초로 생성
		}
		
		int result = alertMapper.insertAlert(alert);
		
		if(result == 0) {
			log.error("알림 정보 저장 실패!!");
		}
		
		long generatedAlertNo = alert.getAlertNo();
		
		if(generatedAlertNo == 0) {
			log.error("알림 생성 실패 -> 알림 ID 못가져옴");
		}
		
		// 수신자 정보 저장 후 실시간 알림 발송
		for(String username : recipientUsernames) {
			List<AlertSettingVO> userSettings = alertMapper.selectAlertSettings(username);		// 회원의 알림세팅 가져오기
			boolean canSendAlert = userSettings.stream()
					.filter(s -> s.getAlertTypeCode()
					.equals(alert.getAlertTypeCode()))		// 알림유형코드가 일치할때
					.findFirst()
					.map(s -> "Y".equalsIgnoreCase(s.getAlertEnabledYn()))		// 알림설정 Y일때 보내도록 설정
					.orElse(true);		// 해당 타입에 대한 설정이 없으면 기본값 전송
			
			if(!canSendAlert) {
				log.info("회원 {}는 {}유형 알림 안받습니당", username, alert.getAlertTypeCode());
				continue;		// 다음 수신자로 넘어가기
			}
			
			AlertReceiverVO receiver = new AlertReceiverVO();
			receiver.setAlertNo(generatedAlertNo);		// 알림 번호 설정
			receiver.setMemUsername(username);			// 회원 아이디 설정
			receiver.setAlertGetDate(null);				
			receiver.setAlertReadYn("N");				// 기본값 'N' (안읽음)
			receiver.setAlertDelYn("N");				// 기본값 'N' (삭제안됨)
			int receiverResult = alertMapper.insertAlertReceiver(receiver);
			
			if(receiverResult == 0) {
				log.warn("회원 {}에 대한 알림 수신자 저장 실패, 알림번호: {}", username, generatedAlertNo);
				continue;
			}
			
			
			try {
				messagingTemplate.convertAndSendToUser(username, "/queue/alerts", alert);		// alert객체 전송
				log.info("WebSocket 알림 전송 완료: 회원 -{}, 알림 번호 - {}", username, generatedAlertNo);
				
			} catch (Exception e) {
				log.error("WebSocket 알림 전송 실패: 회원 -{}, 알림 번호 - {}", username, generatedAlertNo);
			}
		}
	}

	@Override
	public List<AlertVO> getAlertsByUsername(String memUsername) throws Exception {
		log.debug("getAlertByUsername() 실행...! 회원: {}", memUsername);
		return alertMapper.selectAlertByUsername(memUsername);
	}
	
	@Override
	public List<AlertVO> getLatestAlertsByUsername(String username, int cnt) throws Exception {
		log.debug("getLatestAlertsByUsername() 실행...! 회원: {}, 개수: {}", username, cnt);
		return alertMapper.selectLatestAlertsByUsername(username, cnt);
	}


	@Override
	public int getUnreadAlertCnt(String memUsername) throws Exception {
		log.debug("getUnreadAlertCnt() 실행...! 회원: {}", memUsername);
		return alertMapper.cntUnreadAlerts(memUsername);
	}

	@Override
	@Transactional
	public boolean markAsRead(long alertNo, String memUsername) throws Exception {
		log.debug("markAsRead() 실행...! 알림번호: {}, 회원: {}", alertNo, memUsername);
		int updatedRows = alertMapper.markAsRead(alertNo, memUsername);
		return updatedRows > 0;
	}

	@Override
	@Transactional
	public void markAllAsRead(String memUsername) throws Exception {
		log.debug("markAllAsRead() 실행..! 회원: {}", memUsername);
		alertMapper.markAllAsRead(memUsername);
	}

	@Override
	@Transactional
	public boolean markAsDeleted(long alertNo, String memUsername) throws Exception {
		log.debug("markAsDeleted() 실행..! 알림번호: {}, 회원: {}", alertNo, memUsername);
		int updatedRows = alertMapper.markAsDeleted(alertNo, memUsername);
		return updatedRows > 0;
	}

	@Override
	public List<AlertSettingVO> getAlertSettings(String memUsername) throws Exception {	
		log.debug("getAlertSettings() 실행..! 회원: {}", memUsername);
		List<AlertSettingVO> settings = alertMapper.selectAlertSettings(memUsername);
		if(settings != null && !settings.isEmpty()) {
			// 매퍼로 ALERT_TYPE_CODE 그룹의 코드목록, 설명 가져오기
			List<CommonCodeDetailVO> alertTypeDetails = commonCodeMapper.selectCommonCodeDetails("ALERT_TYPE_CODE");		// 타입 코드 설정
			Map<String, String> descriptMap = alertTypeDetails.stream()
					.collect(Collectors.toMap(CommonCodeDetailVO::getCommCodeDetNo, CommonCodeDetailVO::getCommCodeDetNm));
			
			for(AlertSettingVO setting : settings) {
				setting.setAlertDescription(descriptMap.get(setting.getAlertTypeCode()));
			}
		}
		return settings;
	}

	@Override
	public void saveAlertSettings(List<AlertSettingVO> settings, String memUsername) throws Exception {
		log.debug("saveAlertSettings() 실행..! 알림 설정: {}, 회원: {}", settings, memUsername);
		// 개별 알림 설정
		for(AlertSettingVO setting: settings) {
			
			setting.setMemUsername(memUsername);
			
			if(setting.getAlertModDate() == null) {
				setting.setAlertModDate(new Timestamp(System.currentTimeMillis()));
			}
			
			alertMapper.insertAlertSetting(setting);
		}
	}

	@Override
	@Transactional
	public List<AlertSettingVO> createDefalutAlertForUser(String username) throws Exception {
		log.debug("createDefalutAlertForUser() 실행...! 회원: {}", username);
		
		List<AlertSettingVO> defaultSettings = new ArrayList<>();
		String alertTypeGroupCode = "ALERT_TYPE_CODE";
		
//		List<CommonCodeDetailVO> alertTypes = commonCodeMapper.selectCommonCodeDetails(alertTypeGroupCode);
		List<String> alertTypeCodes = alertMapper.selectAllAlertTypeCodes(alertTypeGroupCode);
		
		if(alertTypeCodes == null || alertTypeCodes.isEmpty()) {
			log.warn("'{}'그룹에 대한 알림유형 찾지 못함", alertTypeGroupCode);
			return defaultSettings;
		}
		
		Timestamp currentTime = new Timestamp(System.currentTimeMillis());
		
		for(String alertTypeCode : alertTypeCodes) {
			AlertSettingVO setting = new AlertSettingVO();
			setting.setMemUsername(username);;
			setting.setAlertTypeCode(alertTypeCode);
			setting.setAlertEnabledYn("Y");
			setting.setAlertModDate(currentTime);
//			setting.setAlertDescription(alertTypeCode);		// jsp에서 ㄱㄱ
			
			alertMapper.insertSetting(setting);
			defaultSettings.add(setting);
		}
		log.debug("회원 {}의 기본 알림 설정 {}개 생성 완료", username, defaultSettings);
		return defaultSettings;
	}

	
}
