package kr.or.ddit.ddtown.controller.admin.goods;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.http.HttpServletRequest;
import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.admin.goods.IAdminGoodsService;
import kr.or.ddit.ddtown.service.goods.IGoodsService;
import kr.or.ddit.vo.artist.ArtistGroupVO;
import kr.or.ddit.vo.goods.goodsStockVO;
import kr.or.ddit.vo.goods.goodsVO;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@Controller
@RequestMapping("/admin/goods/items")
public class AdminGoodsItemsController {
	
	@Autowired
	private IGoodsService goodsservice;
	
	@Autowired
	private IAdminGoodsService admingoodsservice;
	
	//상품 목록 페이지
	@GetMapping("/list")
	public String goodsItemList(Model model) {
		//7. 아티스트 그룹 목록 조회
				List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
				model.addAttribute("artistList", artistList);
				
				//1. 기본 상품 목록
				List<goodsVO> goodsList = goodsservice.goodsList();
				
				//2. 상태 정보가 포함된 목록
		        List<goodsVO> goodsStatus = goodsservice.getgoodsStatus();
		        model.addAttribute("goodsStatus", goodsStatus);
		        
		        //3. 모든 상품 재고 정보
		        List<goodsStockVO> stockList = goodsservice.getgoodsTotalStock();
		        
		        //4. 굿즈 상태 리스트(상태 정보가 포함된 목록)를 Map으로 변환
		        Map<Integer, goodsVO> statusMap = goodsStatus.stream()
		        		.collect(Collectors.toMap(
		        				goodsVO::getGoodsNo,
		        				Function.identity(),
		        				(existing, replacement) -> existing
		        				));
		        
		        //5.재고 정보를 빠르게 찾기 위해 stockList를 Map으로 변환
		        Map<Integer, Integer> stockQuantityMap = new HashMap<>();
		        if(stockList != null) {
		        		for(goodsStockVO stock: stockList) {
		        			stockQuantityMap.put(stock.getGoodsNo(), stock.getTotalStockQty());
		        		}
		        }
		        
		        //6.기본 상품 목록(goodsList)에 상태 정보와 재고 정보 채워넣기
		        for(goodsVO goods: goodsList) {
		        		goodsVO statusData = statusMap.get(goods.getGoodsNo());
		        		
		        		if(statusData != null) {
		        			goods.setStatusEngKey(statusData.getStatusEngKey());
		        			goods.setStatusKorName(statusData.getStatusKorName());
		        		} else {
		        			goods.setStatusEngKey("null");
		        			goods.setStatusKorName("상태 없음");
		        			log.info("상품번호 {} 에 대한 상태 정보를 statusInfoMap에서 찾을 수 없습니다.", goods.getGoodsNo());
		        		}
		        		
		        		Integer stockQty = stockQuantityMap.get(goods.getGoodsNo());
		        		goods.setStockRemainQty(stockQty != null ? stockQty: 0);
		        }
		        
		        model.addAttribute("goodsList", goodsList);

		        log.info("최종 상품 상태 값 로깅..");
		        if(goodsList != null && !goodsList.isEmpty()) {
		        		for(goodsVO goods:goodsList) {
		        			log.info("상품번호: {}, 상품명: {}, 상태(Eng): {}, 상태(Kor): {}, 현재고: {}",
		                            goods.getGoodsNo(),
		                            goods.getGoodsNm(),
		                            goods.getStatusEngKey(),
		                            goods.getStatusKorName(),
		                            goods.getStockRemainQty());
		                
		        		}
		        } else {
		        		log.info("조회된 최종 상품 목록이 없습니다.");
		        }
		        
		        log.info("--- 최종 상품 상태 값 로깅 끝 ---");
		        // --- 로거 사용 부분 끝 ---
		        
				return "admin/goods/items/items_list";
	}
	
	//상품 상세 페이지
	@GetMapping("/detail")
	public String goodsItemDetail() {
		return "admin/goods/items/items_detail";
	}
	
	//상품 등록 페이지 불러오기
	@GetMapping("/form")
	public String goodsItemFormPage(Model model) {
		log.info("상품 등록 폼 요청");
		
		//1.AdminGoodsService를 통해 아티스트 그룹 목록 조회
		List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
		
		log.info("컨트롤러 - artistList is null: {}", (artistList == null));
		
		if(artistList != null) {
			log.info("컨트롤러 - artistList size: {}", artistList.size());
			for (ArtistGroupVO artist : artistList) {
				log.info("컨트롤러 - Artist: No={}, Name={}", artist.getArtGroupNo(), artist.getArtGroupNm());
			}
		}
		
		model.addAttribute("artistList", artistList);
		
		goodsVO currentItem = new goodsVO();
		log.info("컨트롤러 - item.artGroupNo: {}", currentItem.getArtGroupNo());
		
		//2.새로운 빈 goodsVO 객체를 item이라는 이름으로 전달
		model.addAttribute("item", currentItem);
		
		return "admin/goods/items/items_form";
	}
	
	//상품 등록하기
	@PostMapping("/form")
	public String goodsItemForm(
			@ModelAttribute goodsVO goods, 
			RedirectAttributes ra,
			Model model,
			HttpServletRequest request
			) {
		 // ★★★ 이 로그가 핵심! ★★★
	    log.warn("<<<<< CONTROLLER POST /items/register 진입! Thread: {}, SessionId: {} >>>>>", 
	            Thread.currentThread().getName(), 
	            request.getSession().getId()); // 현재 요청의 세션 ID 로깅
		
		log.info("goodsItemRegister() 실행!!! goodsVO: {}", goods);
		log.info("옵션 개수: {}", goods.getOptions() != null ? goods.getOptions().size() : 0);
		
		String goPage = "";
		
		try { 
			ServiceResult result = admingoodsservice.itemsRegister(goods); //서비스 결과 받기
			
			if (ServiceResult.OK.equals(result)) { //명시적으로 성공 결과 확인
				ra.addAttribute("successMessage", "상품 등록이 성공했습니다!!");
				goPage = "redirect:/admin/goods/items/list";
			} else {
				log.warn("상품 등록 실패: {}", goods.getGoodsNo());
				
				model.addAttribute("errorMessage", "상품 등록에 실패했습니다!! 입력 내용을 확인하세요!!");
				model.addAttribute("item", goods);

				List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
				model.addAttribute("artistList", artistList);
				
				goPage = "admin/goods/items/items_form";
			}
			
		} catch (Exception e) { //서비스 실행 중 예외 발생
			log.error("상품 등록 중 시스템 오류 발생", e);
			
			model.addAttribute("errorMessage", "시스템 오류로 인해 상품 등록에 실패했습니다. (" + e.getMessage() +")");
			
			List<ArtistGroupVO> artistList = admingoodsservice.getArtistGroupsForForm();
			model.addAttribute("artistList", artistList);
			
			goPage = "admin/goods/items/items_form";
		} 
		
		return goPage;
	}
}
