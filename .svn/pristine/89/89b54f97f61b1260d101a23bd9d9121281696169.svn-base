package kr.or.ddit.ddtown.controller.mypage;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.auth.IUserService;
import kr.or.ddit.vo.security.CustomUser;
import kr.or.ddit.vo.user.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/mypage")
public class MypageController {

	@Autowired
	private IUserService userService;
	
	/**
	 * 로그인한 회원정보 가져오기
	 * @return
	 */
	private CustomUser getCurrentUser() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if(authentication != null && authentication.getPrincipal() instanceof CustomUser) {
			return (CustomUser) authentication.getPrincipal();
		}
		return null;
	}
	
	
	@GetMapping({"", "/info"})
	public String mypageProfileEdit(Model model, RedirectAttributes ra) {
		log.info("mypageProfileEdit() 실행...!");
		CustomUser customUser = getCurrentUser();
		
		if(customUser == null) {
			ra.addFlashAttribute("errorMessage", "로그인 해주세요!!");
			return "redirect:/login";
		}
		
		try {
			MemberVO memberVO = userService.getMemberInfo(customUser.getUsername());
			log.info("memberVO: {}", memberVO);
			
			if (memberVO == null) {
				model.addAttribute("errorMessage", "회원 정보를 찾을 수 없음!!");
            }
			
            model.addAttribute("memberVO", memberVO);		//  폼에 바인딩
		} catch (Exception e) {
			log.error("프로필 수정 중 오류", e);
			model.addAttribute("errorMessage", "회원 정보를 불러오는 중 오류 발생!!");
		}
		return "mypage/profileEditForm";
	}
	
	@PostMapping("/profile/verifyPassword")
	@ResponseBody
	public ResponseEntity<Map<String, Object>> verifyCurrentPassword(@RequestParam String currentPassword){
		Map<String, Object> resp = new HashMap<>();
		CustomUser customUser = getCurrentUser();
		
		if(customUser == null) {
			resp.put("success", false);
			resp.put("message", "로그인 해주세요!!");
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(resp);
		}
		
		try {
			boolean isValid = userService.verifyCurrentPassword(customUser.getUsername(), currentPassword);
			resp.put("success", isValid);
			resp.put("message", isValid ? "비밀번호가 확인되었습니다." : "비밀번호가 일치하지 않습니다.");
			return ResponseEntity.ok(resp);
		} catch (Exception e) {
			log.error("현재 비밀번호 확인 중 오류!!");
			resp.put("success", false);
			resp.put("message", "오류 발생!!" + e.getMessage());
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(resp);
		}
	}
	
	@PostMapping("/profile/update")
	@ResponseBody
	public ResponseEntity<Map<String, Object>> profileUpdate(@RequestBody MemberVO memberVO) {
		log.info("profileUpdate() 실행...!");
		
		Map<String, Object> resp = new HashMap<>();
		CustomUser customUser = getCurrentUser();
		
		if(customUser == null) {
			resp.put("success", false);
			resp.put("message", "로그인 해주세요!!");
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(resp);
		}
		
		MemberVO memberToUpdate = new MemberVO();
        // 수정 가능한 필드만 클라이언트에서 받은 값으로 설정
        memberToUpdate.setUsername(customUser.getUsername()); 
        memberToUpdate.setMemUsername(customUser.getUsername()); 
        
        memberToUpdate.setMemNicknm(memberVO.getMemNicknm());
        memberToUpdate.setPeoEmail(memberVO.getPeoEmail());
        memberToUpdate.setPeoPhone(memberVO.getPeoPhone());
        memberToUpdate.setMemZipCode(memberVO.getMemZipCode());
        memberToUpdate.setMemAddress1(memberVO.getMemAddress1());
        memberToUpdate.setMemAddress2(memberVO.getMemAddress2());
		
		try {
			ServiceResult result = userService.updateMemberInfo(memberVO);
			if(result == ServiceResult.OK) {
				resp.put("success", true);
				resp.put("message", "개인정보 수정 성공!!");
				
				MemberVO updatedProfile = userService.getMemberInfo(customUser.getUsername());
				resp.put("updatedProfile", updatedProfile);
				return ResponseEntity.ok(resp);
			} else {
				resp.put("success", false);
				resp.put("message", "개인정보 수정 실패..");
				return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(resp);
			}
		} catch (Exception e) {
			log.error("프로필 수정 처리중 오류", e);
			resp.put("success", false);
			resp.put("message", "개인정보 수정중 오류 발생!!" + e.getMessage());
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(resp);
			
		}
	}
	
	@PostMapping("/password/update")
	@ResponseBody
	public ResponseEntity<Map<String, Object>> passwordUpdate(
            @RequestBody Map<String, String> payload, HttpServletRequest request
            ) {

        Map<String, Object> response = new HashMap<>();
        CustomUser customUser = getCurrentUser();
        if (customUser == null) { 
        	return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response); 
        }

        String currentPassword = payload.get("currentPassword");
        String newPassword = payload.get("newPassword");
        String confirmNewPassword = payload.get("confirmNewPassword");

        if (StringUtils.isAnyBlank(currentPassword, newPassword, confirmNewPassword) || !newPassword.equals(confirmNewPassword)) {
            response.put("success", false);
            response.put("message", "입력값을 확인해주세요. 새 비밀번호와 확인 비밀번호가 일치해야 합니다.");
            return ResponseEntity.badRequest().body(response);
        }

        try {
            ServiceResult result = userService.changePassword(customUser.getUsername(), currentPassword, newPassword);
            if (result == ServiceResult.OK) {
                response.put("success", true);
                response.put("message", "비밀번호가 성공적으로 변경되었습니다. 다음 로그인부터 적용됩니다.");
                
            } else if (result == ServiceResult.INVALIDPASSWORD) {
                response.put("success", false);
                response.put("message", "현재 비밀번호가 일치하지 않습니다.");
            } else {
                response.put("success", false);
                response.put("message", "비밀번호 변경에 실패했습니다.");
            }
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("비밀번호 변경 처리 중 오류", e);
            response.put("success", false);
            response.put("message", "비밀번호 변경 중 오류가 발생했습니다.");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
	
	@PostMapping("/withdraw")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> memberWithdrawal(
            @RequestParam String confirmationText, // 일반 폼 데이터로 전송 가정
            HttpServletRequest request) {

        Map<String, Object> response = new HashMap<>();
        CustomUser customUser = getCurrentUser();
        if (customUser == null) {
            response.put("success", false);
            response.put("message", "로그인이 필요합니다. 다시 로그인해주세요.");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
        }

        try {
            ServiceResult result = userService.deleteMember(customUser.getUsername(), confirmationText);
            if (result == ServiceResult.OK) {
                // *** 수정: 명시적인 세션 무효화 (Spring Security Logout 처리와 연계하는 것이 더 좋음) ***
                HttpSession session = request.getSession(false);
                if (session != null) {
                    session.invalidate();
                }
                SecurityContextHolder.clearContext();
                response.put("success", true);
                response.put("message", "회원 탈퇴가 성공적으로 처리되었습니다. 이용해주셔서 감사합니다.");
                response.put("redirectUrl", request.getContextPath() + "/"); // 메인 페이지로 리다이렉트할 URL
            } else {
                response.put("success", false);
                response.put("message", "입력하신 확인 문자열이 일치하지 않거나, 탈퇴 처리 중 문제가 발생했습니다.");
            }
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("회원 탈퇴 처리 중 오류 발생", e);
            response.put("success", false);
            response.put("message", "회원 탈퇴 처리 중 오류가 발생했습니다.");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
}
