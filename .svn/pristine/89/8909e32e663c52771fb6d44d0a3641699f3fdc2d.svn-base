package kr.or.ddit.ddtown.controller.chat.dm;

import java.util.List;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.ddtown.service.chat.dm.IChatChannelService;
import kr.or.ddit.vo.chat.dm.ChatChannelVO;
import kr.or.ddit.vo.security.CustomUser;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Controller
@RequestMapping("/chat/dm")
public class DMChatChannelController {
	
	private final IChatChannelService chatService;
	
	// 채팅 리스트 화면
	@GetMapping("/channel")
	public String channelForm() {
		return "chat/dm/channel";
	}
	
	// 모든 채팅방 목록 반환
	@GetMapping("/channels")
	@ResponseBody
	public List<ChatChannelVO> channelList(String username) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String currentUser = authentication.getName();	// 현재 로그인한 사용자 아이디
		log.info("name : {}", currentUser);
		return chatService.findAllChannels(currentUser);
	}
	
	// 채팅방 생성
	@PostMapping("/channel")
	@ResponseBody
	public ChatChannelVO createChannel(@ModelAttribute ChatChannelVO chatChannelVO) {
		int comuProfileNo = chatChannelVO.getComuProfileNo();
		int artGroupNo = chatChannelVO.getArtGroupNo();
		String chatTypeCode = chatChannelVO.getChatTypeCode();
		
		return chatService.createChatChannel(comuProfileNo, artGroupNo, chatTypeCode);
	}
	
	// 채팅방 입장 화면
	@GetMapping("/channel/enter/{chatChannelNo}")
	public String channelDetail(Model model, 
								@PathVariable int chatChannelNo,
								@AuthenticationPrincipal CustomUser customUser
								) {
		// 현재 로그인한 사용자 ID
		String username = customUser.getUsername();
		int meesageLimit = 50;
		
		// 1. 채널 정보 조회
		ChatChannelVO chatChannelVO = chatService.getChatChannelDetail(chatChannelNo, username, meesageLimit);
		
		if (chatChannelVO == null) {
            log.warn("Chat channel {} not found or is not a DM_CHANNEL (CTC001).", chatChannelNo);
            return "redirect:/error/404";
        }
		
		// 2. 접근 제어
		if(!chatChannelVO.isArtist() && !chatChannelVO.isHasMembership()) {
			log.warn("user {} does not have a valid membership subscription for artist group {} or is not access channel {}."
					, username, chatChannelVO.getArtGroupNo(), chatChannelVO.getChatChannelNo());
			model.addAttribute("message", "해당 아티스트 그룹의 멤버십 구독자만 이용할 수 있습니다.");
			return "redirect:/chat/dm/channel";
		}
		
		// 3. 권한 확인 후 초기 메세지 로드
		model.addAttribute("chatChannelNo", chatChannelVO.getChatChannelNo());
		model.addAttribute("artistUsername", chatChannelVO.getArtistUsername());
		model.addAttribute("artistComuNicknm", chatChannelVO.getArtistComuNicknm());
		model.addAttribute("initialMessages", chatChannelVO.getInitialMessages());
		model.addAttribute("isArtist", chatChannelVO.isArtist());
		
		log.info("Loaded detail for channel {}. Current User: {}, IsArtist: {}, HasMembership: {}, Initial Messages: {}",
				chatChannelVO.getChatChannelNo(), username, chatChannelVO.isArtist(), chatChannelVO.isHasMembership(), chatChannelVO.getInitialMessages().size());
		
		return "chat/dm/channeldetail";
	}
	
	// 특정 채팅방과 해당 아티스트 조회
	@GetMapping("/channel/{chatChannelNo}")
	@ResponseBody
	public ChatChannelVO channelInfo(@PathVariable int chatChannelNo) {
		return chatService.findChatChannelWithArtistInfo(chatChannelNo);
	}
}
