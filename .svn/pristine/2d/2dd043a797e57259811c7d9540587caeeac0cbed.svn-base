package kr.or.ddit.ddtown.service.concert.notice;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.mapper.concert.notice.IConcertNoticeMapper;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.concert.ConcertNoticeVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class ConcertNoticeServiceImpl implements IConcertNoticeService { 

    @Autowired
    private IConcertNoticeMapper noticeMapper; 

    @Override
    public List<ConcertNoticeVO> selectNoticeList(PaginationInfoVO<ConcertNoticeVO> pagingVO) throws Exception {
        log.info("selectNoticeList() 실행...!");
        return noticeMapper.selectNoticeList(pagingVO);
    }

    @Override
    public int selectNoticeCount(PaginationInfoVO<ConcertNoticeVO> pagingVO) throws Exception {
    	log.info("selectNoticeCount() 실행...!");
        return noticeMapper.selectNoticeCount(pagingVO);
    }

    @Override
    public ConcertNoticeVO selectNotice(int concertNotiNo) throws Exception {
    	log.info("selectNotice() 실행...!");
        return noticeMapper.selectNotice(concertNotiNo);
    }

    @Transactional
    @Override
    public ServiceResult insertNotice(ConcertNoticeVO noticeVO) throws Exception {
    	log.info("insertNotice() 실행...!");
    	
        int row = noticeMapper.insertNotice(noticeVO);
        log.info("insertNotice() 실행 후 concertNotiNo : " + noticeVO.getConcertNotiNo());
        log.info("concertVO : " + noticeVO);
        if (row > 0) {
            log.info("콘서트 공지사항 등록 성공: {}", noticeVO.getConcertNotiTitle());
            return ServiceResult.OK;
        }
        log.warn("콘서트 공지사항 등록 실패: {}", noticeVO.getConcertNotiTitle());
        return ServiceResult.FAILED;
    }

    @Transactional
    @Override
    public ServiceResult updateNotice(ConcertNoticeVO noticeVO) throws Exception {
    	log.info("updateNotice() 실행...!");
    	
        int row = noticeMapper.updateNotice(noticeVO);
        if (row > 0) {
	        log.info("콘서트 공지사항 수정 성공 (번호: {})", noticeVO.getConcertNotiNo());
	        return ServiceResult.OK;
        }
        log.warn("콘서트 공지사항 수정 실패 (번호: {}): {}", noticeVO.getConcertNotiNo());
        return ServiceResult.FAILED;
    }

    @Transactional
    @Override
    public ServiceResult deleteNotice(int concertNotiNo) throws Exception {
    	log.info("deleteNotice() 실행...!");
        
        int row = noticeMapper.deleteNotice(concertNotiNo);
        if (row > 0) {
            log.info("콘서트 공지사항 삭제 성공 (번호: {})", concertNotiNo);
            return ServiceResult.OK;
        }
        log.warn("콘서트 공지사항 삭제 실패 (번호: {})", concertNotiNo);
        return ServiceResult.FAILED;
    }
}