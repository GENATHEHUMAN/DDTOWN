package kr.or.ddit.ddtown.service.file;

import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ddtown.mapper.file.IAttachmentFileMapper;
import kr.or.ddit.vo.file.AttachmentFileDetailVO;
import kr.or.ddit.vo.file.AttachmentFileGroupVO;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class FileServiceImpl implements IFileService {
	
	@Autowired
	private IAttachmentFileMapper fileMapper;
	
	@Value("${kr.or.ddit.upload.path}")
	private String uploadBasePath;
	
	private SimpleDateFormat KST_DATE_FORMAT = new SimpleDateFormat("yyyy/MM/dd");
	
	@Override
	@Transactional
	public Integer uploadAndProcessFiles(MultipartFile[] files, String fileTypeCode) throws Exception {
		if(files == null || files.length == 0 || files[0].isEmpty()) {
			return null;
		}
		
		AttachmentFileGroupVO groupVO = new AttachmentFileGroupVO();
		groupVO.setFileTypeCode(fileTypeCode);
		groupVO.setFileTypeNm(getFileTypeNmFromCode(fileTypeCode));
		fileMapper.insertFileGroup(groupVO);
		
		int fileGroupNo = groupVO.getFileGroupNo();
		
		if(fileGroupNo <= 0) {
			log.error("파일 그룹 생성 실패");
			throw new RuntimeException("파일 그룹을 생성할 수 없습니다.");
		}
		
		String datePath = KST_DATE_FORMAT.format(new Date());
		File finalUploadDirectory = new File(uploadBasePath + File.separator + datePath);
		
		if(!finalUploadDirectory.exists()) {
			finalUploadDirectory.mkdirs();
		}
		
		for(MultipartFile multipartFile : files) {
			if(multipartFile != null && !multipartFile.isEmpty()) {
				String originalFileName = multipartFile.getOriginalFilename();
				String fileExtension = "";
				if(originalFileName != null && originalFileName.contains(".")) {
					fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
				}
				String saveFileName = UUID.randomUUID().toString() + fileExtension;
				File saveFile = new File(finalUploadDirectory, saveFileName);
				
				try {
					multipartFile.transferTo(saveFile);		// 실제파일 저장
					
					AttachmentFileDetailVO fileDetail = new AttachmentFileDetailVO();
					fileDetail.setFileGroupNo(fileGroupNo);
					fileDetail.setFileOriginalNm(originalFileName);
					fileDetail.setFileSaveNm(saveFileName);
					fileDetail.setFileSavepath(datePath);
					fileDetail.setFileExt(fileExtension.replace(".", ""));
					fileDetail.setFileMimeType(multipartFile.getContentType());
					fileDetail.setFileSize(multipartFile.getSize());
					fileDetail.setFileFancysize(fancySize(multipartFile.getSize()));
					
					fileMapper.insertFileDetail(fileDetail);
					log.info("파일 저장 및 DB 삽입 완료: {}, 저장경로: {}", saveFileName, datePath);
					
				} catch (Exception e) {
					log.error("파일 저장 실패: {}", originalFileName, e);
					
					throw new IOException(originalFileName + " 파일 저장 실패", e);
				}
			}
		}
		
		return fileGroupNo;
	}

	@Override
	public List<AttachmentFileDetailVO> getFileDetailsByGroupNo(int fileGroupNo) throws Exception {
		List<AttachmentFileDetailVO> files = fileMapper.selectFileDetailsByGroupNo(fileGroupNo);
		for(AttachmentFileDetailVO file : files) {
			file.setWebPath("/upload/" + file.getFileSavepath().replace(File.separatorChar, '/') + "/" + file.getFileSaveNm());
		}
		return files;
	}

	@Override
	public AttachmentFileDetailVO getRepresentativeFileByGroupNo(int fileGroupNo) throws Exception {
		List<AttachmentFileDetailVO> files = fileMapper.selectFileDetailsByGroupNo(fileGroupNo); // 그룹 내 모든 파일 조회
        if (files != null && !files.isEmpty()) {
            // 이미지 파일을 우선적으로 대표 이미지로 선택
            for (AttachmentFileDetailVO file : files) {
                if (file.getFileMimeType() != null && file.getFileMimeType().startsWith("image")) {
                    file.setWebPath("/upload/" + file.getFileSavepath().replace(File.separatorChar, '/') + "/" + file.getFileSaveNm());
                    return file; // 첫 번째 이미지 파일을 대표로 반환
                }
            }
            // 이미지 파일이 없다면, 그냥 첫 번째 파일을 대표로 반환 (기존 로직)
            AttachmentFileDetailVO firstFile = files.get(0);
            firstFile.setWebPath("/upload/" + firstFile.getFileSavepath().replace(File.separatorChar, '/') + "/" + firstFile.getFileSaveNm());
            return firstFile;
        }
        return null; // 파일이 없으면 null 반환
	}

	@Override
	@Transactional
	public void deleteFilesByGroupNo(int fileGroupNo) throws Exception {
		List<AttachmentFileDetailVO> filesToDelete = fileMapper.selectFileDetailsByGroupNo(fileGroupNo);
		for(AttachmentFileDetailVO file : filesToDelete) {
			// separator로 경로구분자로 실제파일 경로구성함
			File physicalFile = new File(uploadBasePath + File.separator + file.getFileSavepath() + File.separator + file.getFileSaveNm());
			
			if(physicalFile.exists()) {
				if(physicalFile.delete()) {
					log.info("물리파일 삭제 성공");
				} else {
					log.warn("물리파일 삭제 실패");
				}
			} else {
				log.warn("삭제할 물리파일 없음");
			}
		}
		fileMapper.deleteFileDetailsByGroupNo(fileGroupNo);
		fileMapper.deleteFileGroup(fileGroupNo);
		log.info("파일 그룹 및 상세파일 삭제완료, 그룹번호: {}", fileGroupNo);
	}
	
	@Override
	@Transactional
	public void deleteSpecificFiles(List<Integer> attachDetailNos, Integer fileGroupNo) {
		if(attachDetailNos == null || attachDetailNos.isEmpty()) {
			return;
		}
		
		for(Integer attachDetailNo : attachDetailNos) {
			AttachmentFileDetailVO fileDetail = fileMapper.selectFileDetail(attachDetailNo);	// 개별 파일 조회
			if(fileDetail != null) {
				File physicalFile = new File(uploadBasePath + File.separator + fileDetail.getFileSavepath()
				+ File.separator + fileDetail.getFileSaveNm());		// 물리파일 주소값 가져옴 기본저장주소 + 저장경로 + 저장명
				if(physicalFile.exists()) {	// 실제 물리파일이 존재할 때
					if(physicalFile.delete()) {
						log.info("물리 파일 삭제 성공");
					} else {
						log.warn("물리 파일 삭제 실패!!");
					}
				} else {
					log.warn("삭제할 물리 파일 없음!!");
			}
				fileMapper.deleteFileDetail(attachDetailNo);	// DB에서 첨부파일 상세번호 삭제
				log.info("DB 첨부파일 상세번호 삭제 완료");
			}
		}
		
		// 개별 파일 삭제 후, 해당 그룹에 아무것도 없으면 파일그룹도 삭제시켜야함
		if(fileGroupNo != null) {
			List<AttachmentFileDetailVO> remainingFiles = fileMapper.selectFileDetailsByGroupNo(fileGroupNo);
			if(remainingFiles == null || remainingFiles.isEmpty()) {
				fileMapper.deleteFileGroup(fileGroupNo);
				log.info("파일 그룹 삭제 완료 그룹번호 : {}", fileGroupNo);
			}
		}
	}
	
	// Bytes, KB, MB등으로 보기쉽게 변환함
	private String fancySize(long size) {
		
		DecimalFormat df = new DecimalFormat("0.00");
		if(size < 1024) {
			return size + " Bytes";
		} else if(size < (1024 * 1024)) {
			return df.format((double) size / 1024) + " KB";
		} else {
			return df.format((double) size / (1024 * 1024)) + " MB";
		}
	}
	
	private String getFileTypeNmFromCode(String fileTypeCode) {
		if("FITC001".equals(fileTypeCode)) return "기업 공지파일";
		if("FITC009".equals(fileTypeCode)) return "콘서트 공지파일";		// 각 번호 양식에 맞는 FITC값 넣어주세용
		if("FITC010".equals(fileTypeCode)) return "콘서트 일정파일";		// 각 번호 양식에 맞는 FITC값 넣어주세용
		return "기타파일";
	}
}
