package kr.or.ddit.ddtown.service.admin.goods;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.mapper.goods.IGoodsMapper;
import kr.or.ddit.ddtown.service.file.IFileService;
import kr.or.ddit.vo.artist.ArtistGroupVO;
import kr.or.ddit.vo.goods.goodsOptionVO;
import kr.or.ddit.vo.goods.goodsStockVO;
import kr.or.ddit.vo.goods.goodsVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class AdminGoodsServiceImpl implements IAdminGoodsService {
	
	@Autowired
	private IFileService fileService;
	
	@Autowired
	private IGoodsMapper goodsMapper;
	
    private static final String FILETYPECODE = "FITC004";
	
	//상품 등록
	@Transactional
	@Override
	public ServiceResult itemsRegister(goodsVO goodsVO) throws Exception {
		// Service
		log.warn("<<<<< SERVICE itemsRegister 진입! Thread: {}, GoodsNm: {} >>>>>", Thread.currentThread().getName(), goodsVO.getGoodsNm());
		log.info("itemsRegister() 실행 시작..!");
		
		//---------------------------상품 코드 만드는 로직 시작------------------------------
		//1. 새로운 상품 번호 (goodsNo)를 시퀀스에서 미리 가져오기
		int newGoodsNo = goodsMapper.selectNextGoodsNo();
		goodsVO.setGoodsNo(newGoodsNo); //가져온 번호를 VO에 설정
		log.info("새로운 goodsNo 채번: {}", newGoodsNo);
		
		
		//2.상품 코드 (goodsCode)생성: "아티스트 그룹 번호 art_group_no + 상품 번호 goods_no"
		String artGroupNoForCode = ""; //초기화
		
		if(goodsVO.getArtGroupNo() > 0) { //유효한 그룹 번호인지 확인
			artGroupNoForCode = String.valueOf(goodsVO.getArtGroupNo());
			
		} else {
			log.info("유효한 artGroupNo가 전달되지 않았습니다. 상품 코드 생성 규칙 확인 필요 artGroupNo:{}", goodsVO.getArtGroupNo());
			
			throw new IllegalArgumentException("아티스트 그룹은 반드시 선택돼야 합니다.");
		}
		
		//최종 상품 코드 생성
		String goodsNoForCode = String.valueOf(newGoodsNo);
		String generatedGoodsCode = "G" + artGroupNoForCode + "P" + goodsNoForCode;
		goodsVO.setGoodsCode(generatedGoodsCode);
		log.info("생성된 goodsCode(G + 그룹 번호 + P + 상품 번호 형식): {}", generatedGoodsCode);
		//---------------------------상품 코드 만드는 로직 끝------------------------------
		
		//3. 상품 상태 코드 (goodsStatCode) 설정
		String statusEngKeyFromForm = goodsVO.getStatusEngKey();
		String dbGoodsStatCode = null; //초기화
		if("IN_STOCK".equalsIgnoreCase(statusEngKeyFromForm)) {
			dbGoodsStatCode = "GSC001"; //판매중
		} else if ("SOLD_OUT".equalsIgnoreCase(statusEngKeyFromForm)){
			dbGoodsStatCode = "GSC002"; //품절
		}
		
		goodsVO.setGoodsStatCode(dbGoodsStatCode);
		log.info("설정된 goodsStatCode: {}", goodsVO.getGoodsStatCode());
		
		//4. 파일 업로드 처리 및 파일 그룹 번호 생성
		log.info("파일 처리 시작. goodsVO.getGoodsFiles() is null: {}", (goodsVO.getFileGroupNo() == null));
		
		//--------------------파일이 잘 들어가고 있는지 배열에 값 확인하기..----------------
		if(goodsVO.getGoodsFiles() != null) { //파일 배열 확인
			log.info("goodsVO.getGoodsFiles().length:{}", goodsVO.getGoodsFiles().length);
			
			if(goodsVO.getGoodsFiles().length > 0) {
				log.info("첫번째 파일 isEmpty(): {}, OriginFilename:{}", goodsVO.getGoodsFiles()[0].isEmpty(),
						goodsVO.getGoodsFiles()[0].getOriginalFilename());
			}	
		}
		
		if (goodsVO.getGoodsFiles() != null && goodsVO.getGoodsFiles().length > 0 && !goodsVO.getGoodsFiles()[0].isEmpty()) {
			//굿즈 파일 타입 코드 사용
			log.info("fileService.uploadAndProcessFiles 호출. FILECODE: {}", FILETYPECODE); //FILETYPECODE 값 확인
			Integer fileGroupResult = fileService.uploadAndProcessFiles(goodsVO.getGoodsFiles(), FILETYPECODE);
			log.info("fileService.uploadAndProcessFiles 반환 값 (fileGroupResult): {}", fileGroupResult); //파일 들어갔는지 확인 결과
			goodsVO.setFileGroupNo(fileGroupResult);
		} else {
			log.info("업로드할 파일이 없거나 비어있어 fileGroupNo를 null로 설정합니다!!");
			goodsVO.setFileGroupNo(null);
		}
		log.info("설정된 fileGroupNo: {}", goodsVO.getFileGroupNo());
		
		
		//------------------------goodsMultiOptYn 설정 로직--------------------------
		List<goodsOptionVO> options = goodsVO.getOptions();
		
		if (options != null && !options.isEmpty()) {
			goodsVO.setGoodsMultiOptYn("Y"); // 옵션이 있으면 'Y'
			log.info("옵션이 존재하므로 goodsMultiOptYn을 'Y'로 설정");
		} else {
			goodsVO.setGoodsMultiOptYn("N"); // 옵션이 없으면 'N'
			log.info("옵션이 없으므로 goodsMultiOptYn을 'N'으로 설정");
		}
		log.info("DB INSERT 직전 goodsMultiOptYn: {}", goodsVO.getGoodsMultiOptYn());
		//------------------------goodsMultiOptYn 설정 로직 끝--------------------------
		
		
		//5. 상품 정보 DB에 삽입 (goodsNo, goodsCode, goodsStatCode, fileGroupNo)
		int goodsInsertRowCount = goodsMapper.itemsRegister(goodsVO);
		
		if(goodsInsertRowCount <= 0) {
			log.warn("상품 기본 정보 DB 등록 실패: {}", goodsVO.getGoodsNm());
			return ServiceResult.FAILED; //상품 정보 등록 실패 시 종료
		}
		log.info("상품 기본 정보 DB 등록 성공: goodsNo={}, goodsNm={}", goodsVO.getGoodsNo(), goodsVO.getGoodsNm());
		
		
		//6. 옵션 및 옵션 별 재고 등록 (goodsNo 생성 이후)
		if(options != null && !options.isEmpty()) {
				//✔️✔️✔️✔️✔️✔️✔️✔️옵션이 있는 경우✔️✔️✔️✔️✔️✔️✔️✔️
				log.info("옵션 사용됨. 옵션 개수: {}", options.size());
				
				int currentOptionSequence = 0; // ★ 루프 시작 전에 0으로 초기화
				
				for(goodsOptionVO option : options) {
					option.setGoodsNo(goodsVO.getGoodsNo()); //현재 상품의 goodsNo를 각 옵션에 설정
					
					// ★★★ 사용자가 입력한 goodsOptEtc 값 처리 ★★★
			        String etcFromForm = option.getGoodsOptEtc(); // JSP 폼에서 바인딩된 값
			        if (etcFromForm == null || etcFromForm.trim().isEmpty()) {
			            // 사용자가 비고를 입력하지 않았거나 공백만 입력한 경우
			            // Oracle에서 ''는 NULL이므로, NOT NULL 컬럼을 위해 실제 문자를 넣어줍니다.
			            option.setGoodsOptEtc(" "); // 또는 "-" 등, "비고 없음"을 나타내는 기본 문자열
			            log.info("옵션 '{}'의 goodsOptEtc가 비어있어 기본값(' ')으로 설정합니다.", option.getGoodsOptNm());
			        }
			        // ★★★ 여기까지 ★★★
			        
			        // ★ 현재 옵션의 순서(goodsOptSec) 설정: 1부터 시작
			        option.setGoodsOptSec(++currentOptionSequence);
					
					//6-1. 옵션 정보 INSERT (GOODS_OPTION 테이블)
					//이 호출 후 option.goodsOptNo 필드에 <selectKey>로 생성된 pk가 채워짐.
					int optionInsertCount = goodsMapper.insertGoodsOption(option);
					
					if(optionInsertCount <= 0) {
						log.info("상품 옵션 정보 등록 실패! 옵션명: {}", option.getGoodsOptNm());
						throw new RuntimeException("상품 옵션 정보 등록에 실패했습니다! 옵션명:{}"+option.getGoodsOptNm());
					} 
					
					log.info("상품 옵션 정보 DB 등록 성공! goodsOptNo: {}", option.getGoodsOptNo());
					
					//6-2. 옵션별 초기 재고 INSERT (GOODS_STOCK 테이블)
					if (option.getInitialStockQty() != null && option.getInitialStockQty() >= 0) {
						goodsStockVO stock = new goodsStockVO();
						stock.setStockTypeCode("STC001"); // "정상 재고" 또는 "초기 입고" 코드
						stock.setGoodsNo(option.getGoodsNo());
						stock.setGoodsOptNo(option.getGoodsOptNo()); //방금 insertGoodsOption으로 생성된 goodsOptNo 사용
						stock.setStockRemainQty(option.getInitialStockQty()); //폼에서 온 초기 재고량
						stock.setStockNewQty(option.getInitialStockQty()); //초기 입고 시 신규 = 남은 재고
						stock.setStockSafeQty(0); //기본 안전 재고
						stock.setStockUnitCost(0); //기본 단위 원가
						
						//goodsOptionVO를 파라미터로 사용하여 재고 등록
						int stockInsertCount = goodsMapper.insertGoodsStock(stock);
						
						if(stockInsertCount <= 0) {
							log.error("옵션 재고 정보 등록 실패! 옵션명: {}", option.getGoodsOptNm());
							throw new RuntimeException("옵션 재고 정보 등록에 실패! 옵션명: {}" + option.getGoodsOptNm());
						}
						
						log.info("옵션 재고 정보 DB 등록 성공! goodsOptNo: {}, 재고: {}	", option.getGoodsOptNo(), option.getInitialStockQty());
					} else {
						log.warn("옵션 '{}'에 대한 초기 재고 수량이 없거나 유효하지 않아 등록을 못합니다!", option.getGoodsOptNm());
					}
				}
				
		} else { //✔️✔️✔️✔️✔️✔️✔️✔️옵션이 없는 경우✔️✔️✔️✔️✔️✔️✔️✔️
			log.info("등록된 상품에 옵션이 없습니다! goodsNo: {}", goodsVO.getGoodsNo());
			
			if(goodsVO.getStockRemainQty() != null && goodsVO.getStockRemainQty() >= 0) {
				//옵션 없는 상품에 기본 옵션 정보를 넣기 위해❗❗❗❗❗
				//옵션이 없다고 옵션 정보를 비울 수 없어서...
				//6-3. 기본 옵션 정보를 goods_option 테이블에 삽입
				goodsOptionVO defaultOption = new goodsOptionVO();
				defaultOption.setGoodsNo(goodsVO.getGoodsNo());
				defaultOption.setGoodsOptNm("단일 옵션");
				//defaultOption.setGoodsOptNo(0);
				defaultOption.setGoodsOptPrice(0);
				defaultOption.setGoodsOptFixYn("N");
				defaultOption.setGoodsOptEtc("-");
				defaultOption.setGoodsOptSec(0);
				
				int defaultOptionInsertCount = goodsMapper.insertGoodsOption(defaultOption); //기본 옵션 저장
				
				if(defaultOptionInsertCount <= 0 || defaultOption.getGoodsOptNo() <= 0) {
					log.error("기본 상품 옵션 생성 실패!! goodsNo: {}", goodsVO.getGoodsNo());
					throw new RuntimeException("기본 상품 옵션 정보 등록에 실패했습니다!!");
				}
				log.info("기본 상품 옵션 DB 등록 성공! new goodsOptNo: {}", defaultOption.getGoodsOptNo());
				
				//6-4. 위에서 생성된 defaultOption의 goodsOptNo를 사용해서 goods_stock 테이블에 재고 등록!
				//goodsStockVO 객체 생성하고 값 생성
				goodsStockVO stockDataForBaseProduct = new goodsStockVO();
				stockDataForBaseProduct.setGoodsNo(goodsVO.getGoodsNo());
				stockDataForBaseProduct.setGoodsOptNo(defaultOption.getGoodsOptNo()); //옵션 없는 기본 상품 재고
				
				stockDataForBaseProduct.setStockRemainQty(goodsVO.getStockRemainQty()); //메인 상품의 재고
				stockDataForBaseProduct.setStockNewQty(goodsVO.getStockRemainQty()); //초기 입고 시 신규 = 남은 재고
				
				stockDataForBaseProduct.setStockTypeCode("STC001");
				stockDataForBaseProduct.setStockSafeQty(0); //기본 안전 재고
				stockDataForBaseProduct.setStockUnitCost(0); //기본 단위 원가
				
				log.info("기본 상품 재고 등록 시도! goodsStockVo: {}", stockDataForBaseProduct);
				int stockInsertCount = goodsMapper.insertGoodsStock(stockDataForBaseProduct); //goodsStockVO 객체 전달
				
				if(stockInsertCount <= 0) {
					log.error("기본 상품 재고 정보 등록 실패! goodsNo: {}", goodsVO.getGoodsNo());
					throw new RuntimeException("기본 상품 재고 정보 등록 실패!");
				}
				
				log.info("기본 상품 재고 정보 DB 등록 성공! goodsNo:{}, 재고: {}", goodsVO.getGoodsNo(), goodsVO.getStockRemainQty());
			} else {
				log.warn("옵션 미사용 상태, 재고도 입력되지 않았음! goodsNo:{}", goodsVO.getGoodsNo());
			}
		}
		
		return ServiceResult.OK;
			
	}

	@Override
	public List<ArtistGroupVO> getArtistGroupsForForm() {
		log.info("AdminGoodsService: 모든 아티스트 그룹 목록 조회 요청");
		
		return goodsMapper.selectAllArtistGroups();
	}
	
}
