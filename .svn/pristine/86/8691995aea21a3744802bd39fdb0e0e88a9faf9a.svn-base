<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Artist A - 커뮤니티</title>
	<%@ include file="../../modules/headerPart.jsp" %>
	<link rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/pages/mainservice_common.css">
	<link rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/pages/artist_community.css">
    <style>
        .membership-blur {
            filter: blur(5px);
            pointer-events: none;
        }
        
        .membership-only {
            position: relative;
        }
        
        .membership-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 2;
        }
        
        .membership-badge {
            background: #8a2be2;
            color: #fff;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 0.8em;
            margin-left: 5px;
        }
    </style>
</head>
<body>
    <!-- <header class="site-header">
        <div class="logo">
            <a href="../2.main/artist_community_main.html">DDTOWN SQUARE</a>
        </div>
        <nav class="utility-nav">
            <ul id="loggedOutNav">
                <li><a href="#" id="loginBtn" class="auth-link">로그인</a></li>
                <li><a href="signup.html" class="signup-link">회원가입</a></li>
            </ul>
            <ul id="loggedInNav" style="display: none">
                <li>
                  <a href="#" id="notificationBtn" class="icon-btn" title="알림">🔔</a>
                </li>
                <li>
                  <a href="#" id="myPageBtn" class="icon-btn" title="마이페이지">👤</a>
                </li>
                <li>
                  <a href="#" class="icon-btn" title="고객센터">👩‍💻</a>
                </li>
                <li><a href="#" id="logoutBtn" class="auth-link">로그아웃</a></li>
              </ul>
        </nav>
        <div class="account-switch" style="margin-top:10px; text-align:right;">
            <button id="switchToArtist" style="margin-right:5px;">아티스트 계정</button>
            <button id="switchToFan">팬 계정</button>
        </div>
    </header> -->
    <<!-- nav class="main-navigation">
        <ul>
            <li><a href="#">굿즈샵</a></li>
            <li>
                <a href="preference_vote.html">선호도 조사</a>
                <ul class="submenu">
                    <li><a href="preference_vote.html" style="color: #8a2be2; font-weight:bold;">인기 투표</a></li>
                </ul>
            </li>
        </ul>
    </nav> -->

    <div class="apt-main-layout">

        <div class="apt-container">
            <header class="apt-header">
                <div class="apt-header-avatar">
                    <div class="artist-avatar-placeholder">A</div>
                </div>
                <div class="apt-header-info">
                    <h2>Artist A <span style="font-size:0.7em; color: #888;">(아티스트)</span></h2>
                    <div class="artist-stats">
                        <span>멤버 5명</span> &bull; <span id="fanCountForApt">123,456</span> 팬
                    </div>
                </div>
                <div class="apt-header-actions">
                <button class="btn-apt-action following" id="followToggleBtn">
                    <span class="follow-icon">✔</span> 팔로잉 </button>
                <button class="btn-apt-action">🔔 알림 설정</button>
            </div>
            </header>

            <nav class="apt-tabs">
                <a href="#" class="tab-item active" data-tab="artistFeed">아티스트</a>
                <a href="#" class="tab-item" data-tab="fanFeed">팬</a>
                <a href="#" class="tab-item" data-tab="live">라이브</a>
                <a href="#" class="tab-item" data-tab="schedule">스케줄</a>
                <a href="#" class="tab-item" data-tab="noticeApt">공지사항</a>
            </nav>

            <main class="apt-content-area">
                <div id="artistFeedContent" class="tab-pane active">
                    <div id="artistFeedSearchWrap" style="margin-bottom:10px; display:flex; gap:8px; align-items:center;">
                        <input type="text" id="artistFeedSearchInput" placeholder="아티스트 게시글 검색 (제목/내용)" style="flex:1; padding:7px 10px; border:1px solid #ccc; border-radius:6px; font-size:0.95em;">
                    </div>
                    <div id="artistFeedPostFormWrap"></div>
                    <div id="artistFeedList"></div>
                </div>

                <div id="fanFeedContent" class="tab-pane" style="display: none;">
                    <div id="fanFeedPostFormWrap"></div>
                    <div id="fanFeedList"></div>
                </div>

                <div id="liveContent" class="tab-pane" style="display: none;">
                    <div class="live-controls" id="artistLiveControls" style="margin-bottom: 20px; text-align: right; display: none;">
                        <button class="btn-start-live">🔴 LIVE 시작하기</button>
                    </div>

                    <section class="live-section now-live">
                        <h3><span class="live-indicator">●</span> LIVE ON AIR</h3>
                        <div class="live-player-placeholder">
                            <img src="https://via.placeholder.com/760x400/000000/FFFFFF?text=실시간+라이브+화면" alt="실시간 라이브 화면">
                            <div class="live-title-overlay">Artist A의 깜짝 라이브! 지금 시청하세요!</div>
                        </div>
                        <div class="live-info">
                            <p><strong>Artist A</strong>님이 라이브 방송 중입니다.</p>
                            <p>시청자: <span id="liveViewerCount">1,234</span>명</p>
                        </div>
                    </section>
                    <section class="live-section past-lives">
                        <h3>라이브 다시보기</h3>
                        <div class="past-live-grid">
                            <div class="past-live-item">
                                <a href="#">
                                    <div class="live-thumbnail-placeholder">
                                        <img src="https://via.placeholder.com/300x170/E6E6FA/000000?text=다시보기+1" alt="라이브 다시보기 1">
                                        <span class="duration-badge">35:12</span>
                                    </div>
                                    <h4 class="past-live-title">Artist A 첫 라이브 방송!</h4>
                                    <p class="past-live-date">2025년 5월 10일</p>
                                    <p class="past-live-views">조회수 1.5만회</p>
                                </a>
                            </div>
                            <div class="past-live-item">
                                <a href="#">
                                    <div class="live-thumbnail-placeholder">
                                        <img src="https://via.placeholder.com/300x170/ADD8E6/000000?text=다시보기+2" alt="라이브 다시보기 2">
                                        <span class="duration-badge">01:12:30</span>
                                    </div>
                                    <h4 class="past-live-title">앨범 작업기 공개! (스포주의)</h4>
                                    <p class="past-live-date">2025년 4월 25일</p>
                                    <p class="past-live-views">조회수 3.2만회</p>
                                </a>
                            </div>
                            <div class="past-live-item">
                                <a href="#">
                                    <div class="live-thumbnail-placeholder">
                                        <img src="https://via.placeholder.com/300x170/90EE90/000000?text=다시보기+3" alt="라이브 다시보기 3">
                                        <span class="duration-badge">58:05</span>
                                    </div>
                                    <h4 class="past-live-title">팬들과의 Q&A 시간</h4>
                                    <p class="past-live-date">2025년 4월 1일</p>
                                    <p class="past-live-views">조회수 2.8만회</p>
                                </a>
                            </div>
                            </div>
                    </section>
                </div>

                <div id="scheduleContent" class="tab-pane" style="display: none;">
                    <div class="calendar-header">
                        <button id="prevMonthBtn">&lt;</button>
                        <h3 id="currentMonthYear">2025년 5월</h3>
                        <button id="nextMonthBtn">&gt;</button>
                        <button id="todayBtn">Today</button>
                    </div>
                    <table class="calendar-table">
                        <thead>
                            <tr>
                                <th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th>
                            </tr>
                        </thead>
                        <tbody id="calendarBody">
                            <tr>
                                <td class="other-month">27</td><td class="other-month">28</td><td class="other-month">29</td><td class="other-month">30</td>
                                <td>1<div class="event">All Day Event</div></td><td>2</td><td>3</td>
                            </tr>
                            <tr>
                                <td>4</td><td>5</td><td>6<div class="event long-event">Long Event</div></td><td>7</td><td>8</td><td>9</td><td>10<div class="event">Conference</div></td>
                            </tr>
                            <tr>
                                <td>11</td><td>12<div class="event">Conference</div><div class="event more-events">+2 more</div></td><td>13<div class="event birthday">7a Birthday P</div></td><td>14</td><td>15<div class="event repeating">4p Repeating</div></td><td>16</td><td>17</td>
                            </tr>
                            <tr>
                                <td class="today">18<div class="event">오늘의 스케줄</div></td><td>19</td><td>20</td><td>21</td><td>22</td><td>23</td><td>24</td>
                            </tr>
                            <tr>
                                <td>25</td><td>26</td><td>27</td><td>28<div class="event">Click for Goo</div></td><td>29</td><td>30</td><td>31</td>
                            </tr>
                            <tr>
                                <td class="other-month">1</td><td class="other-month">2</td><td class="other-month">3</td><td class="other-month">4</td><td class="other-month">5</td><td class="other-month">6</td><td class="other-month">7</td>
                            </tr>
                        </tbody>
                    </table>
                    <p style="text-align:center; margin-top:15px; font-size:0.9em;">(FullCalendar 라이브러리로 교체 예정입니다.)</p>
                </div>
                <div id="noticeAptContent" class="tab-pane" style="display: none;">
                     <p style="padding:20px; text-align:center;">Artist A 관련 중요 공지사항이 여기에 표시됩니다.</p>
                </div>
            </main>
        </div>

        <aside class="apt-sidebar">
            <div class="sidebar-widget apt-level-widget">
                <h3>APT 현황</h3>
                <div class="apt-floor-display" id="aptFloorDisplay">123층 APT</div>
                <div class="fan-count-tooltip-wrapper"> <p class="fan-count-display">팬 <span id="sidebarFanCountApprox">약 12.3만</span> 명</p> <span class="fan-count-tooltip" id="sidebarFanCountExact">123,456명</span> </div>
            </div>

            <div class="sidebar-widget membership-widget">
                <div class="membership-icon">🛡️</div>
                <h3>Membership</h3>
                <p>지금 멤버십에 가입하고 Artist A의 특별한 혜택을 누려보세요.</p>
                <button class="btn-join-membership" id="openMembershipModalBtn">
                    멤버십 가입하기 <span class="arrow">&gt;</span>
                </button>
            </div>

             <!-- 마이 프로필 영역 추가 -->
             <div class="sidebar-widget my-profile-widget" style="margin-bottom: 20px; text-align: center; cursor: pointer;">
             	<div>
             		<button type="button" class="btn btn-outline-primary" id="registProfileBtn">프로필 만들기</button>
             	</div>
                <div style="width: 80px; height: 80px; margin: 0 auto; border-radius: 50%; overflow: hidden; background-color: #e9ecef; display: flex; align-items: center; justify-content: center;">
                    <img src="https://via.placeholder.com/80/8a2be2/FFFFFF?text=프로필" alt="프로필 사진" style="width: 100%; height: 100%; object-fit: cover;" onclick="location.href='my_profile.html'">
                </div>
                <p id="myProfileNickname" style="margin-top: 8px; font-weight: bold; font-size: 1.1em;">나의멋진닉네임</p>
            </div>

        </aside>
    </div>

    <div id="footer-placeholder"></div>

     <div class="modal-overlay" id="membershipModalOverlay" style="display: none;">
        <div class="modal-content membership-modal">
            <button class="modal-close-btn" id="closeMembershipModalBtn" title="닫기">&times;</button>
            <div class="modal-header">
                <img src="https://via.placeholder.com/80x80/8A2BE2/FFFFFF?text=A" alt="Artist A 로고" class="modal-artist-logo">
                <h2>Artist A OFFICIAL MEMBERSHIP</h2>
                <p class="membership-duration">이용 기간: 결제일로부터 30일</p>
            </div>
            <div class="modal-body">
                <div class="membership-main-image">
                    <img src="https://via.placeholder.com/400x200/F8F0FF/8A2BE2?text=Membership+Welcome+Kit" alt="멤버십 웰컴 이미지">
                </div>
                <h3>주요 혜택 안내</h3>
                <ul class="modal-benefits-list">
                    <li>✔️ 멤버십 전용 콘텐츠 이용 가능 (일부 블러 처리된 콘텐츠 즉시 해제!)</li>
                    <li>🗓️ APT 메인 상단에서 아티스트 구독일 D-Day 확인</li>
                    <li>🎤 콘서트/팬미팅 선예매 및 특별 이벤트 참여 기회</li>
                    <li>🎁 한정판 멤버십 키트 제공 (별도 구매 또는 등급에 따라)</li>
                </ul>

                <h3>이용 안내 및 유의사항</h3>
                <ul class="modal-notes-list">
                    <li>본 멤버십은 비용을 선지불하여 이용하는 유료 서비스입니다.</li>
                    <li>멤버십은 아티스트(솔로, 그룹)별로 별도 운영되며, 본 멤버십은 [Artist A] 전용입니다.</li>
                    <li>그룹 내 솔로 활동 멤버 발생 시, 해당 멤버의 커뮤니티는 별도 생성/운영될 수 있습니다.</li>
                    <li>자세한 내용은 구매 페이지의 약관을 참고해주세요.</li>
                </ul>
            </div>
            <div class="modal-footer">
                <div class="membership-price">₩30,000 <span class="vat-notice">(VAT 포함)</span></div>
                <button class="btn-modal-purchase" id="goToPurchasePageBtn">멤버십 구매하기</button>
            </div>
        </div>
    </div>

    <!-- 커뮤니티 가입 오버레이 -->
    <div id="communityOverlay" style="display:none;">
        <div class="community-overlay-bg"></div>
        <button id="joinCommunityBtn" class="join-community-btn">커뮤니티 가입</button>
    </div>

    <!-- 닉네임 입력 모달 -->
    <div id="nicknameModal" style="display:none;">
        <div class="nickname-modal-content">
            <h2>닉네임을 입력해 주세요</h2>
            <input type="text" id="nicknameInput" maxlength="12" placeholder="닉네임">
            <h2>프로필 이미지</h2>
			<div id="previewImgBox">
				<img alt="" src="" id="previewImg">
			</div>            
            <input type="file" id="profileImgBtn">
            <button id="nicknameSubmitBtn" disabled>완료</button>
        </div>
    </div>

    <!-- DM 모달이 삽입될 컨테이너 -->
    <div id="weverse-dm-modal-container"></div>

    <!-- DM 열기 버튼 (원하는 곳에 배치) -->
    <button onclick="openWeverseDM()">DM 열기</button>

    <script>
//         const loginBtn = document.getElementById("loginBtn");
//         const logoutBtn = document.getElementById("logoutBtn");
//         const loggedOutNav = document.getElementById("loggedOutNav");
//         const loggedInNav = document.getElementById("loggedInNav");
//         let isLoggedIn = JSON.parse(localStorage.getItem("isUserLoggedIn")) || false;
//         function updateNav() {
//             if (isLoggedIn) {
//                 loggedOutNav.style.display = "none";
//                 loggedInNav.style.display = "flex";
//             } else {
//                 loggedOutNav.style.display = "flex";
//                 loggedInNav.style.display = "none";
//             }
//         }
//         if (loginBtn) {
//             loginBtn.addEventListener("click", function (event) {
//                 event.preventDefault();
//                 isLoggedIn = true;
//                 localStorage.setItem("isUserLoggedIn", JSON.stringify(isLoggedIn));
//                 updateNav();
//             });
//         }
//         if (logoutBtn) {
//             logoutBtn.addEventListener("click", function (event) {
//                 event.preventDefault();
//                 isLoggedIn = false;
//                 localStorage.setItem("isUserLoggedIn", JSON.stringify(isLoggedIn));
//                 updateNav();
//             });
//         }
//         updateNav();

        const footerPlaceholderApt = document.getElementById('footer-placeholder');
        if (footerPlaceholderApt) { fetch('footer.html').then(response => response.ok ? response.text() : Promise.reject('Footer not found')).then(data => { footerPlaceholderApt.innerHTML = data; }).catch(error => console.error('Error loading footer:', error));}

        const aptTabs = document.querySelectorAll('.apt-tabs .tab-item');
        const aptTabPanes = document.querySelectorAll('.apt-content-area .tab-pane');
        aptTabs.forEach(tab => {
            tab.addEventListener('click', function(event) {
                event.preventDefault();
                aptTabs.forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                const targetPaneId = this.getAttribute('data-tab') + "Content";
                aptTabPanes.forEach(pane => {
                    pane.style.display = (pane.id === targetPaneId) ? 'block' : 'none';
                });
            });
        });
        if(aptTabs.length > 0 && aptTabPanes.length > 0) {
            aptTabs[0].classList.add('active');
            aptTabPanes[0].style.display = 'block';
            for(let i = 1; i < aptTabPanes.length; i++){ aptTabPanes[i].style.display = 'none';}
        }

        function setupPostForm(textareaId, buttonId) {
            const textarea = document.getElementById(textareaId);
            const button = document.getElementById(buttonId);
            if (textarea && button) {
                textarea.addEventListener('input', function() {
                    button.disabled = this.value.trim().length === 0;
                });
                button.addEventListener('click', function() {
                    const postContent = textarea.value.trim();
                    if (postContent) {
                        alert(`(\${buttonId.includes('Artist') ? '아티스트' : '팬'}) 게시물 등록! (내용: \${postContent})\n실제로는 서버로 전송됩니다.`);
                        textarea.value = '';
                        this.disabled = true;
                    }
                });
            }
        }
        setupPostForm('postTextareaArtist', 'submitPostBtnArtist');
        setupPostForm('postTextareaFan', 'submitPostBtnFan');

        const fanCountForAptEl = document.getElementById('fanCountForApt');
        const sidebarFanCountApproxEl = document.getElementById('sidebarFanCountApprox');
        const sidebarFanCountExactEl = document.getElementById('sidebarFanCountExact');
        const aptFloorDisplayEl = document.getElementById('aptFloorDisplay');

        function formatFanCountApprox(count) {
            if (count >= 10000) {
                return (count / 10000).toFixed(1) + '만';
            }
            return count.toLocaleString();
        }

        function updateAptLevelDisplay(exactFanCount) {
            const approxFanCount = formatFanCountApprox(exactFanCount);

            if (fanCountForAptEl) fanCountForAptEl.textContent = exactFanCount.toLocaleString();
            if (sidebarFanCountApproxEl) sidebarFanCountApproxEl.textContent = approxFanCount;
            if (sidebarFanCountExactEl) sidebarFanCountExactEl.textContent = exactFanCount.toLocaleString() + '명';

            let floor = exactFanCount >= 100 ? Math.floor(exactFanCount / 100) : 1;
            if (aptFloorDisplayEl) aptFloorDisplayEl.textContent = `\${floor}층 APT`;
        }

        let currentFanCount = 123456;
        updateAptLevelDisplay(currentFanCount);

        // 커뮤니티 가입 상태 관리
        let isCommunityJoined = JSON.parse(localStorage.getItem("isCommunityJoined")) || false;
        let communityNickname = localStorage.getItem("communityNickname") || "";

        // 팔로우 버튼 제어
        const followToggleBtn = document.getElementById('followToggleBtn');
        function updateFollowBtn() {
            if (!isCommunityJoined) {
                followToggleBtn.innerHTML = '<span class="follow-icon">+</span> 팔로우';
                followToggleBtn.classList.remove('following');
            } else {
                followToggleBtn.innerHTML = '<span class="follow-icon">✔</span> 팔로잉';
                followToggleBtn.classList.add('following');
            }
        }
        updateFollowBtn();

        // 오버레이/모달 DOM
        const communityOverlay = document.getElementById('communityOverlay');
        const joinCommunityBtn = document.getElementById('joinCommunityBtn');
        const nicknameModal = document.getElementById('nicknameModal');
        const nicknameInput = document.getElementById('nicknameInput');
        const nicknameSubmitBtn = document.getElementById('nicknameSubmitBtn');

        // 오버레이 표시/숨김
        function showCommunityOverlay() {
            communityOverlay.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }
        function hideCommunityOverlay() {
            communityOverlay.style.display = 'none';
            document.body.style.overflow = '';
        }

        // 닉네임 모달 표시/숨김
        function showNicknameModal() {
            nicknameModal.style.display = 'flex';
            nicknameInput.value = '';
            nicknameSubmitBtn.disabled = true;
            setTimeout(() => nicknameInput.focus(), 100);
        }
        function hideNicknameModal() {
            nicknameModal.style.display = 'none';
        }

        let overlayChecked = false;
        // 가입 상태에 따라 오버레이/팔로우 버튼 제어
        function checkCommunityJoinState() {
            if (!overlayChecked) {
            	console.log("ss")
                showCommunityOverlay();
                updateFollowBtn();
                followToggleBtn.disabled = true;
            } else {
                hideCommunityOverlay();
                hideNicknameModal();
                updateFollowBtn();
                followToggleBtn.disabled = false;
            }
        }
        checkCommunityJoinState();

        // 오버레이에서 "커뮤니티 가입" 클릭 시
        joinCommunityBtn.onclick = function() {
            showNicknameModal();
        };

        // 닉네임 입력 활성화
        nicknameInput.addEventListener('input', function() {
            nicknameSubmitBtn.disabled = !this.value.trim();
        });

        // 닉네임 "완료" 클릭 시
        nicknameSubmitBtn.onclick = function() {
            const nickname = nicknameInput.value.trim();
            if (nickname) {
                isCommunityJoined = true;
                communityNickname = nickname;
                localStorage.setItem("isCommunityJoined", JSON.stringify(true));
                localStorage.setItem("communityNickname", nickname);
                checkCommunityJoinState();
            }
        };

        // 팔로우 버튼 클릭 시 (가입 전에는 모달 띄움)
        followToggleBtn.onclick = function() {
            if (!isCommunityJoined) {
                showNicknameModal();
            } else {
                // 팔로잉 상태 토글 등 추가 로직 필요시 여기에
            }
        };

        const artistLiveControls = document.getElementById('artistLiveControls');
        const currentUserIsArtist = true;

        if (artistLiveControls) {
            if (currentUserIsArtist) {
                artistLiveControls.style.display = 'block';
            } else {
                artistLiveControls.style.display = 'none';
            }
        }

        const btnStartLive = document.querySelector('.btn-start-live');
        if (btnStartLive) {
            btnStartLive.addEventListener('click', function() {
                alert('실시간 라이브를 시작합니다! (실제 스트리밍 서버 연동 필요)');
            });
        }

        const currentMonthYearEl = document.getElementById('currentMonthYear');
        const calendarBodyEl = document.getElementById('calendarBody');
        const prevMonthBtn = document.getElementById('prevMonthBtn');
        const nextMonthBtn = document.getElementById('nextMonthBtn');
        const todayBtn = document.getElementById('todayBtn');

        let currentCalendarDate = new Date();

        function renderCalendar(date) {
            if (!currentMonthYearEl || !calendarBodyEl) return;

            const year = date.getFullYear();
            const month = date.getMonth();

            currentMonthYearEl.textContent = `\${year}년 \${month + 1}월`;
            console.log(`Rendering calendar for \${year}-\${month + 1}`);
        }

        if (prevMonthBtn) {
            prevMonthBtn.addEventListener('click', () => {
                currentCalendarDate.setMonth(currentCalendarDate.getMonth() - 1);
                renderCalendar(currentCalendarDate);
            });
        }
        if (nextMonthBtn) {
            nextMonthBtn.addEventListener('click', () => {
                currentCalendarDate.setMonth(currentCalendarDate.getMonth() + 1);
                renderCalendar(currentCalendarDate);
            });
        }
        if (todayBtn) {
            todayBtn.addEventListener('click', () => {
                currentCalendarDate = new Date();
                renderCalendar(currentCalendarDate);
            });
        }

        renderCalendar(currentCalendarDate);

        const openMembershipModalButton = document.getElementById('openMembershipModalBtn');
        const membershipModalOverlay = document.getElementById('membershipModalOverlay');
        const closeMembershipModalButton = document.getElementById('closeMembershipModalBtn');
        const goToPurchasePageButton = document.getElementById('goToPurchasePageBtn');

        function openMembershipModal() {
            if (membershipModalOverlay) {
                membershipModalOverlay.style.display = 'flex';
                setTimeout(() => {
                    membershipModalOverlay.classList.add('active');
                }, 10);
            }
        }

        function closeMembershipModal() {
            if (membershipModalOverlay) {
                membershipModalOverlay.classList.remove('active');
            }
        }

        if (openMembershipModalButton) {
            openMembershipModalButton.addEventListener('click', function(event) {
                event.preventDefault();
                openMembershipModal();
            });
        }

        if (closeMembershipModalButton) {
            closeMembershipModalButton.addEventListener('click', closeMembershipModal);
        }

        if (membershipModalOverlay) {
            membershipModalOverlay.addEventListener('click', function(event) {
                if (event.target === membershipModalOverlay) {
                    closeMembershipModal();
                }
            });
        }

        if (goToPurchasePageButton) {
            goToPurchasePageButton.addEventListener('click', function() {
                alert('멤버십 구매 페이지로 이동합니다. (실제 페이지 이동 로직 필요)');
                closeMembershipModal();
            });
        }

        // 계정 상태 관리
        let currentAccountType = localStorage.getItem('currentAccountType') || 'fan';
        const switchToArtistBtn = document.getElementById('switchToArtist');
        const switchToFanBtn = document.getElementById('switchToFan');
        if (switchToArtistBtn) switchToArtistBtn.onclick = () => { currentAccountType = 'artist'; localStorage.setItem('currentAccountType', 'artist'); updateAptUI(); };
        if (switchToFanBtn) switchToFanBtn.onclick = () => { currentAccountType = 'fan'; localStorage.setItem('currentAccountType', 'fan'); updateAptUI(); };

        // 게시글/댓글 데이터 (임시)
        let aptPosts = [
            { id: 1, authorType: 'artist', authorName: 'Artist A', title: '첫 인사', content: '팬 여러분 안녕하세요! 😊 오늘 날씨가 정말 좋네요! 다들 즐거운 하루 보내고 계신가요? 저희는 열심히 다음 무대를 준비하고 있답니다! 기대 많이 해주세요! ✨', comments: [
                { id: 1, authorType: 'fan', authorName: '나의멋진닉네임', content: '와! 아티스트님 글이다!!', isMine: true }
            ] },
            { id: 2, authorType: 'fan', authorName: '열혈팬123', title: '응원해요', content: 'Artist A 이번 앨범 너무 좋아요! 매일 듣고 있습니다. 항상 응원해요! ❤️', comments: [
                { id: 2, authorType: 'fan', authorName: 'ArtistX팬', content: '정말 멋진 그림이네요!', isMine: false },
                { id: 3, authorType: 'fan', authorName: '나의멋진닉네임', content: '@ArtistX팬 감사합니다! :)', isMine: true }
            ] }
        ];
        let aptPostIdSeq = 3;
        let aptCommentIdSeq = 4;

        function updateAptUI() {
            // 탭 상태 확인
            const activeTab = document.querySelector('.apt-tabs .tab-item.active').getAttribute('data-tab');
            // 아티스트 탭
            if (activeTab === 'artistFeed') {
                // 입력창: 아티스트 계정만 노출
                document.getElementById('artistFeedPostFormWrap').innerHTML = (currentAccountType === 'artist') ? `
                    <div class="feed-post-form">
                        <input type="text" id="artistPostTitle" placeholder="제목을 입력하세요" style="width:100%;margin-bottom:7px;padding:7px 10px;border:1px solid #ccc;border-radius:6px;font-size:0.95em;">
                        <textarea id="artistPostContent" placeholder="Artist A가 팬들에게 남기는 메시지... (관리자용)"></textarea>
                        <div class="form-actions">
                            <label style="display:inline-flex;align-items:center;gap:5px;margin-right:10px;">
                                <input type="checkbox" id="membershipOnlyCheck" style="width:16px;height:16px;">
                                멤버십 전용 콘텐츠
                            </label>
                            <button class="btn-submit-post" id="submitArtistPostBtn" disabled>등록 (아티스트)</button>
                        </div>
                    </div>` : '';
                // 검색창: 항상 노출
                document.getElementById('artistFeedSearchWrap').style.display = 'flex';
                // 게시글 목록: 아티스트 글만, 검색어 반영
                renderAptPostList('artist');
                // 입력창 이벤트
                if (currentAccountType === 'artist') {
                    const titleInput = document.getElementById('artistPostTitle');
                    const contentInput = document.getElementById('artistPostContent');
                    const submitBtn = document.getElementById('submitArtistPostBtn');
                    function checkValid() {
                        submitBtn.disabled = !(titleInput.value.trim() && contentInput.value.trim());
                    }
                    titleInput.addEventListener('input', checkValid);
                    contentInput.addEventListener('input', checkValid);
                    submitBtn.addEventListener('click', function() {
                        if (titleInput.value.trim() && contentInput.value.trim()) {
                            aptPosts.unshift({ 
                                id: aptPostIdSeq++, 
                                authorType: 'artist', 
                                authorName: 'Artist A', 
                                title: titleInput.value.trim(), 
                                content: contentInput.value.trim(), 
                                comments: [],
                                isMembershipOnly: document.getElementById('membershipOnlyCheck').checked
                            });
                            titleInput.value = '';
                            contentInput.value = '';
                            document.getElementById('membershipOnlyCheck').checked = false;
                            submitBtn.disabled = true;
                            renderAptPostList('artist');
                        }
                    });
                }
            } else if (activeTab === 'fanFeed') {
                // 입력창: 팬 계정만 노출
                document.getElementById('fanFeedPostFormWrap').innerHTML = (currentAccountType === 'fan') ? `
                    <div class="feed-post-form">
                        <input type="text" id="fanPostTitle" placeholder="제목을 입력하세요" style="width:100%;margin-bottom:7px;padding:7px 10px;border:1px solid #ccc;border-radius:6px;font-size:0.95em;">
                        <textarea id="fanPostContent" placeholder="Artist A에게 응원의 메시지를 남겨보세요!"></textarea>
                        <div class="form-actions">
                            <button class="btn-submit-post" id="submitFanPostBtn" disabled>등록 (팬)</button>
                        </div>
                    </div>` : '';
                document.getElementById('artistFeedSearchWrap').style.display = 'none';
                renderAptPostList('fan');
                if (currentAccountType === 'fan') {
                    const titleInput = document.getElementById('fanPostTitle');
                    const contentInput = document.getElementById('fanPostContent');
                    const submitBtn = document.getElementById('submitFanPostBtn');
                    function checkValid() {
                        submitBtn.disabled = !(titleInput.value.trim() && contentInput.value.trim());
                    }
                    titleInput.addEventListener('input', checkValid);
                    contentInput.addEventListener('input', checkValid);
                    submitBtn.addEventListener('click', function() {
                        if (titleInput.value.trim() && contentInput.value.trim()) {
                            aptPosts.unshift({ id: aptPostIdSeq++, authorType: 'fan', authorName: '나의멋진닉네임', title: titleInput.value.trim(), content: contentInput.value.trim(), comments: [] });
                            titleInput.value = '';
                            contentInput.value = '';
                            submitBtn.disabled = true;
                            renderAptPostList('fan');
                        }
                    });
                }
            } else {
                document.getElementById('artistFeedSearchWrap').style.display = 'none';
            }
        }

        function renderAptPostList(type) {
            let searchKeyword = '';
            if (type === 'artist') {
                searchKeyword = document.getElementById('artistFeedSearchInput').value.trim().toLowerCase();
            }
            const listWrap = (type === 'artist') ? document.getElementById('artistFeedList') : document.getElementById('fanFeedList');
            let filtered = aptPosts.filter(p => p.authorType === type);
            if (type === 'artist' && searchKeyword) {
                filtered = filtered.filter(p => p.title.toLowerCase().includes(searchKeyword) || p.content.toLowerCase().includes(searchKeyword));
            }
            if (filtered.length === 0) {
                listWrap.innerHTML = `<div style="padding:30px 0;text-align:center;color:#888;">게시글이 없습니다.</div>`;
                return;
            }
            listWrap.innerHTML = filtered.map(post => {
                if (post.editing) {
                    return `
                    <div class="feed-item" data-post-id="\${post.id}">
                        <div class="feed-item-header">
                            <div class="author-avatar" style="background-color:\${post.authorType==='artist'?'#8a2be2':'#e9ecef'};color:\${post.authorType==='artist'?'#fff':'#333'};">\${post.authorType==='artist'?'A':'팬'}</div>
                            <div class="author-info">
                                <span class="author-name" style="color:\${post.authorType==='artist'?'#8a2be2':'#333'};">${post.authorName}</span>
                                <span class="post-time">방금 전</span>
                            </div>
                            <div class="post-options">
                                <button class="post-options-btn" style="background:none;border:none;font-size:1.2em;cursor:pointer;">•••</button>
                                <div class="post-options-menu" style="display:none;position:absolute;right:0;top:30px;background:#fff;border:1px solid #ccc;border-radius:6px;box-shadow:0 2px 8px rgba(0,0,0,0.08);z-index:10;min-width:90px;">
                                    <div class="post-option-item" data-action="cancel-edit">수정 취소</div>
                                </div>
                            </div>
                        </div>
                        <div class="feed-item-content">
                            <input type="text" class="edit-title-input" value="\${post.title.replace(/"/g, '&quot;')}" style="width:100%;margin-bottom:7px;padding:7px 10px;border:1px solid #ccc;border-radius:6px;font-size:0.95em;">
                            <textarea class="edit-content-input" style="width:100%;min-height:70px;padding:10px;border:1px solid #ccc;border-radius:6px;font-size:0.95em;">\${post.content.replace(/</g, '&lt;')}</textarea>
                            <div style="margin-top:8px;text-align:right;">
                                <button class="btn-save-edit" style="padding:7px 18px;background:#8a2be2;color:#fff;border:none;border-radius:20px;font-weight:bold;">저장</button>
                            </div>
                        </div>
                    </div>
                    `;
                } else {
                    return `
                    <div class="feed-item\${post.isMembershipOnly ? ' membership-only' : ''}" data-post-id="${post.id}">
                        <div class="feed-item-header">
                            <div class="author-avatar" style="background-color:\${post.authorType==='artist'?'#8a2be2':'#e9ecef'};color:\${post.authorType==='artist'?'#fff':'#333'};">\${post.authorType==='artist'?'A':'팬'}</div>
                            <div class="author-info">
                                <span class="author-name" style="color:\${post.authorType==='artist'?'#8a2be2':'#333'};">\${post.authorName}</span>
                                <span class="post-time">방금 전</span>
                                \${post.isMembershipOnly ? '<span class="membership-badge" style="background:#8a2be2;color:#fff;padding:2px 6px;border-radius:10px;font-size:0.8em;margin-left:5px;">멤버십 전용</span>' : ''}
                            </div>
                            <div class="post-options">
                                <button class="post-options-btn" style="background:none;border:none;font-size:1.2em;cursor:pointer;">•••</button>
                                <div class="post-options-menu" style="display:none;position:absolute;right:0;top:30px;background:#fff;border:1px solid #ccc;border-radius:6px;box-shadow:0 2px 8px rgba(0,0,0,0.08);z-index:10;min-width:90px;">
                                    \${isMyPost(post) ? `<div class="post-option-item" data-action="edit">수정</div><div class="post-option-item" data-action="delete">삭제</div>` : `<div class="post-option-item" data-action="report">신고</div>`}
                                </div>
                            </div>
                        </div>
                        <div class="feed-item-content\${post.isMembershipOnly ? ' membership-blur' : ''}" style="\${post.isMembershipOnly ? 'position:relative;' : ''}">
                            \${post.isMembershipOnly ? `
                                <div class="membership-overlay" style="position:absolute;top:0;left:0;right:0;bottom:0;background:rgba(255,255,255,0.9);display:flex;flex-direction:column;align-items:center;justify-content:center;z-index:1;">
                                    <div style="text-align:center;padding:20px;">
                                        <div style="font-size:1.2em;font-weight:bold;margin-bottom:10px;">멤버십 전용 콘텐츠입니다</div>
                                        <p style="color:#666;margin-bottom:15px;">이 게시물은 멤버십 회원만 볼 수 있습니다.</p>
                                        <button class="btn-join-membership" onclick="openMembershipModal()" style="background:#8a2be2;color:#fff;border:none;padding:8px 20px;border-radius:20px;cursor:pointer;">
                                            멤버십 가입하기
                                        </button>
                                    </div>
                                </div>
                            ` : ''}
                            <div class="post-title" style="font-weight:bold;font-size:1.1em;margin-bottom:5px;">\${post.title}</div>
                            <p class="post-text">\${post.content.replace(/\n/g, '<br>')}</p>
                        </div>
                        <div class="feed-item-actions">
                            <button class="action-btn comment-toggle-btn">💬 댓글 <span class="count">\${post.comments.length}</span></button>
                        </div>
                        <div class="comments-wrapper" style="display:none;"></div>
                    </div>
                    `;
                }
            }).join('');
            // 옵션 메뉴, 댓글, ... 이벤트 바인딩
            listWrap.querySelectorAll('.post-options-btn').forEach(btn => {
                btn.onclick = function(e) {
                    e.stopPropagation();
                    document.querySelectorAll('.post-options-menu').forEach(m => m.style.display = 'none');
                    const menu = this.nextElementSibling;
                    menu.style.display = (menu.style.display === 'block') ? 'none' : 'block';
                };
            });
            document.addEventListener('click', function() {
                document.querySelectorAll('.post-options-menu').forEach(m => m.style.display = 'none');
            });
            listWrap.querySelectorAll('.post-options-menu .post-option-item').forEach(item => {
                item.onclick = function(e) {
                    e.stopPropagation();
                    const feedItem = this.closest('.feed-item');
                    const postId = parseInt(feedItem.getAttribute('data-post-id'));
                    const action = this.getAttribute('data-action');
                    if (action === 'edit') {
                        aptPosts = aptPosts.map(p => p.id === postId ? { ...p, editing: true } : { ...p, editing: false });
                        renderAptPostList(type);
                    } else if (action === 'cancel-edit') {
                        aptPosts = aptPosts.map(p => ({ ...p, editing: false }));
                        renderAptPostList(type);
                    } else if (action === 'delete') {
                        if (confirm('정말 삭제하시겠습니까?')) {
                            aptPosts = aptPosts.filter(p => p.id !== postId);
                            renderAptPostList(type);
                        }
                    } else if (action === 'report') {
                        const reason = prompt('신고 사유를 입력해 주세요.');
                        if (reason && reason.trim()) {
                            alert('신고가 접수되었습니다.\n사유: ' + reason);
                        }
                    }
                };
            });
            // 수정 저장 버튼
            listWrap.querySelectorAll('.btn-save-edit').forEach(btn => {
                btn.onclick = function() {
                    const feedItem = this.closest('.feed-item');
                    const postId = parseInt(feedItem.getAttribute('data-post-id'));
                    const titleInput = feedItem.querySelector('.edit-title-input');
                    const contentInput = feedItem.querySelector('.edit-content-input');
                    if (!titleInput.value.trim() || !contentInput.value.trim()) {
                        alert('제목과 내용을 모두 입력해 주세요.');
                        return;
                    }
                    aptPosts = aptPosts.map(p => p.id === postId ? { ...p, title: titleInput.value.trim(), content: contentInput.value.trim(), editing: false } : { ...p, editing: false });
                    renderAptPostList(type);
                };
            });
            // 댓글 토글/등록
            listWrap.querySelectorAll('.comment-toggle-btn').forEach(btn => {
                btn.onclick = function() {
                    const feedItem = this.closest('.feed-item');
                    const postId = parseInt(feedItem.getAttribute('data-post-id'));
                    const post = aptPosts.find(p => p.id === postId);
                    const wrapper = feedItem.querySelector('.comments-wrapper');
                    if (wrapper.style.display === 'block') {
                        wrapper.style.display = 'none';
                        return;
                    }
                    wrapper.style.display = 'block';
                    renderAptCommentList(wrapper, post, type);
                };
            });
        }

        function renderAptCommentList(wrapper, post, type) {
            wrapper.innerHTML = `
                <div class="comment-form-container">
                    <textarea class="comment-textarea" placeholder="댓글을 남겨보세요..."></textarea>
                    <button class="btn-submit-comment" disabled>등록</button>
                </div>
                <div class="comment-list">
                    \${post.comments.map(c => `
                        <div class="comment-item\${c.isMine ? ' my-comment' : ''}">
                            <div class="comment-author-avatar">\${c.isMine ? '나' : c.authorName[0]}</div>
                            <div class="comment-content">
                                <span class="comment-author-name">\${c.authorName}</span>
                                <p class="comment-text">\${c.content.replace(/\n/g, '<br>')}</p>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
            const textarea = wrapper.querySelector('.comment-textarea');
            const btn = wrapper.querySelector('.btn-submit-comment');
            textarea.addEventListener('input', function() {
                btn.disabled = !this.value.trim();
            });
            btn.addEventListener('click', function() {
                if (textarea.value.trim()) {
                    post.comments.push({ id: aptCommentIdSeq++, authorType: currentAccountType, authorName: (currentAccountType==='artist'?'Artist A':'나의멋진닉네임'), content: textarea.value.trim(), isMine: true });
                    textarea.value = '';
                    btn.disabled = true;
                    renderAptCommentList(wrapper, post, type);
                    renderAptPostList(type);
                }
            });
        }

        function isMyPost(post) {
            return (currentAccountType === post.authorType && (post.authorType === 'artist' || post.authorName === '나의멋진닉네임'));
        }

        document.getElementById('artistFeedSearchInput').addEventListener('input', function() {
            renderAptPostList('artist');
        });

        document.querySelectorAll('.apt-tabs .tab-item').forEach(tab => {
            tab.addEventListener('click', function(event) {
                event.preventDefault();
                document.querySelectorAll('.apt-tabs .tab-item').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                const targetPaneId = this.getAttribute('data-tab') + "Content";
                document.querySelectorAll('.apt-content-area .tab-pane').forEach(pane => {
                    pane.style.display = (pane.id === targetPaneId) ? 'block' : 'none';
                });
                updateAptUI();
            });
        });

        // 최초 렌더링
        updateAptUI();

        function openWeverseDM() {
            // 이미 열려있으면 다시 append하지 않고 show만
            if (document.getElementById('weverse-dm-root')) {
                document.getElementById('weverse-dm-root').style.display = '';
                return;
            }
            fetch('direct_meassage.html')
                .then(res => res.text())
                .then(html => {
                    // 임시 div로 파싱
                    const temp = document.createElement('div');
                    temp.innerHTML = html;
                    // DM 모달 본체만 추출
                    const dmRoot = temp.querySelector('#weverse-dm-root');
                    if (dmRoot) {
                        // 모달 스타일(중앙, 오버레이) 추가
                        dmRoot.style.position = 'fixed';
                        dmRoot.style.top = '50%';
                        dmRoot.style.left = '50%';
                        dmRoot.style.transform = 'translate(-50%, -50%)';
                        dmRoot.style.zIndex = '9999';
                        dmRoot.style.boxShadow = '0 8px 32px rgba(0,0,0,0.18)';
                        document.getElementById('weverse-dm-modal-container').appendChild(dmRoot);
                    }
                    // script 실행 (WeverseDM 네임스페이스 등록)
                    const scripts = temp.querySelectorAll('script');
                    scripts.forEach(scr => {
                        const s = document.createElement('script');
                        if (scr.src) s.src = scr.src;
                        else s.textContent = scr.textContent;
                        document.body.appendChild(s);
                    });
                });
        }

        // DM 닫기 함수 (WeverseDM.close() 내부에서 자동 처리됨)
        function closeWeverseDM() {
            if (document.getElementById('weverse-dm-root')) {
                document.getElementById('weverse-dm-root').style.display = 'none';
            }
        }
        
       	const registProfileBtn = document.getElementById("registProfileBtn")
        
       	registProfileBtn.addEventListener("click",function(){
       		console.log(nicknameModal);
       		showNicknameModal();
        }) 
    </script>
</body>
</html>