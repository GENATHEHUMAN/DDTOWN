package kr.or.ddit.ddtown.controller.emp.audition;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.emp.audition.IEmpAuditionService;
import kr.or.ddit.vo.corporate.audition.AuditionVO;
import kr.or.ddit.vo.security.CustomUser;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/emp/audition")
public class EmpAuditionController {

	@Autowired
	private IEmpAuditionService empAuditionService;
	
	private String getCurrentEmpUsername() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if(authentication != null && authentication.getPrincipal() instanceof CustomUser) {
			CustomUser customUser = (CustomUser) authentication.getPrincipal();
			if(customUser.getEmployeeVO() != null) {
				return customUser.getEmployeeVO().getEmpUsername();
			}
		}
		return null;
	}
	
	//일정목록 이동
	@GetMapping("/schedule")
	public String auditionList(Model model) {
		log.info("audition() 실행...!");
		List<AuditionVO> EmpauditionList = empAuditionService.auditionList();
		
		log.info("가져온 오디션 리스트: {}", EmpauditionList);
		model.addAttribute("auditionList", EmpauditionList);
		return "emp/audition/schedule/list";
	}
	//일정 상세보기
	 @GetMapping("/detail.do")
	 public String auditionDetail(int audiNo, Model model) { AuditionVO auditionVO
	 = empAuditionService.detailAudition(audiNo);
	 model.addAttribute("audition",auditionVO); return
	 "emp/audition/schedule/detail"; }
	 // 등록페이지 이동
	 @GetMapping("/form.do")
	 public String auditionForm() {
	 return "emp/audition/schedule/form";
	 }
	 //
	 @PostMapping("/insert.do")
	 public String auditionInsert(AuditionVO auditionVO, Model model, RedirectAttributes ra, Principal principal) {
		 
		 String goPage = "";
		 
		 String empUsername = principal.getName();
		 log.info("auditionInsert->empUsername : {}",empUsername);
		 
		 auditionVO.setEmpUsername(empUsername);
		 
		 log.info("register->auditionVO : {}",auditionVO);
		 
		 Map<String, String> errors = new HashMap<>();
		 if(StringUtils.isBlank(auditionVO.getAudiTitle())) {
				errors.put("ApplicantNm", "제목을 입력해주세요!");
			}
		 if(StringUtils.isBlank(auditionVO.getAudiContent())) {
				errors.put("ApplicantNm", "제목을 입력해주세요!");
			}
		 if(errors.size() > 0 ) {	//실패
			 model.addAttribute("errors", errors);
			 model.addAttribute("auditionVO", auditionVO);
			 goPage = "redirect:/emp/audition/form.do";
		 }else {
			 ServiceResult result;
			try {
				result = empAuditionService.insertAudition(auditionVO);
				
				if(result.equals(ServiceResult.OK)) {
					 ra.addFlashAttribute("message", "오디션 일정이 등록되었습니다.");
					 goPage= "redirect:/emp/audition/schedule";
				 }else {
					 model.addAttribute("message", "서버에러, 다시 시도해주세요!");
					 model.addAttribute("audition", auditionVO);
					 goPage = "/emp/audition/form.do";
				 }
			} catch (Exception e) {
				e.printStackTrace();
				model.addAttribute("Message",  "데이터 처리 중 서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요!");
				model.addAttribute("auditionVO", auditionVO); 
                goPage = "redirect:/emp/audition/form.do"; // 등록 페이지로 이동
			}
			 
		 }
		 	return goPage;
	 }
	 //수정하기 이동
	 @GetMapping("/update.do")
	 public String  auditionUpdate(int audiNo, Model model) {
		 AuditionVO auditionVO = empAuditionService.detailAudition(audiNo);
		 model.addAttribute("audition", auditionVO);
		 model.addAttribute("status", "u");
		 return "emp/audition/schedule/mod";
	 }
	 @PostMapping("/update.do")
	 public String auditionupdate(AuditionVO auditionVO, Model model, RedirectAttributes ra, Principal principal) {
		 
		 String goPage = "";
		 
		 String empUsername = principal.getName();
		 log.info("auditionInsert->empUsername : {}",empUsername);
		 
		 auditionVO.setEmpUsername(empUsername);
		 
		 log.info("register->auditionVO : {}",auditionVO);
		 ServiceResult result = empAuditionService.updateAudition(auditionVO);
		 if(result.equals(ServiceResult.OK)) {
			 ra.addFlashAttribute("message", " 수정이 완료 되었습니다!");
			 goPage= "redirect:/emp/audition/detail.do?audiNo="+auditionVO.getAudiNo();
		 }else {
			 model.addAttribute("message", "수정에 실패하였습니다! 다시 시도해주세요...!");
			 model.addAttribute("auditionVO", auditionVO);
			 goPage= "/emp/audition/update.do";
		 }
		 return goPage;
	 }
	 /**
	  * 지원자 정보 매핑
	 * @return
	 */
	@GetMapping("/applicant")
	 public String applicantList() {
		 return "emp/audition/applicant/list";
	 }
	 
	 
	 
}
