package kr.or.ddit.ddtown.controller.emp.group;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.ddtown.service.emp.artist.IAlbumService;
import kr.or.ddit.ddtown.service.emp.artist.IArtistGroupService;
import kr.or.ddit.ddtown.service.emp.artist.IArtistService;
import kr.or.ddit.vo.artist.AlbumVO;
import kr.or.ddit.vo.artist.ArtistGroupVO;
import kr.or.ddit.vo.artist.ArtistVO;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@Controller
@RequestMapping("/emp/group")
public class CommunityGroupManagementController {

		@Autowired
		private IArtistGroupService artistGroupService;
		
		@Autowired
		private IArtistService artistService;
		
		
		@GetMapping("/group-management")
		public String retrieveGroup(Model model) {
			log.info("아티스트 그룹 목록 페이지 요청");
			
			 // 서비스 계층을 호출하여 아티스트 그룹 목록을 가져옵니다.
	        List<ArtistGroupVO> groupList = artistGroupService.retrieveArtistGroupList();
	        
	        // 전체 아티스트 목록을 가져오기 위함
	        List<ArtistVO> allArtists = artistService.getAllArtists();
	        
	        // 전체 앨범 목록을 가져오기 위함
	        List<AlbumVO> allAlbums = artistGroupService.getAllAlbums();

	        model.addAttribute("artistGroupList", groupList);
	        model.addAttribute("allArtists", allArtists);
	        model.addAttribute("allAlbums", allAlbums);
	        log.info(allAlbums.toString());
	        log.info(allArtists.toString());
	        
	        if (groupList != null && !groupList.isEmpty()) {
	            log.info("조회된 아티스트 그룹 수: {}", groupList.size());
	        } else {
	            log.info("조회된 아티스트 그룹이 없습니다.");
	        }

	        return "emp/group/group-management";
		}
		
		@ResponseBody
		@PostMapping("/update")
		public ResponseEntity<Map<String, Object>> updateArtistGroup(@RequestBody ArtistGroupVO groupToUpdate) {
			log.info("updateArtistGroup() 실행");
			log.info("아티스트 그룹 업데이트 요청 받음 (ArtistGroupVO 사용): {}", groupToUpdate);
	        log.info("전달된 멤버 ID 문자열: {}", groupToUpdate.getMemberArtNos());
	        log.info("전달된 앨범 ID 문자열: {}", groupToUpdate.getSelectedAlbumNos());
	        
	        Map<String, Object> response = new HashMap<>();
	        
	        try {
	        	int cnt = artistGroupService.updateArtistGroupAndMembersAndAlbums(groupToUpdate);
	        	
	        	if(cnt > 0) {
	        		response.put("status", "success");
	        		response.put("message", "그룹 정보가 성공적으로 업데이트 되었습니다.");
	        		log.info("그룹 정보 업데이트 성공 : 그룹번호 {}", groupToUpdate.getArtGroupNo());
	        		return ResponseEntity.ok(response);
	        	}else {
	        		response.put("status", "error");
	        		response.put("message", "그룹 정보 업데이트에 실패했습니다. (변경된 내용이 없거나, 서비스 로직 실패)");
	        		log.warn("그룹 정보 업데이트 실패 (서비스 로직, 반환값 0): 그룹번호 {}", groupToUpdate.getArtGroupNo());
	        		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
	        	}
				
			} catch (Exception e) {
				log.error("그룹 정보 업데이트 중 서버 오류 발생: 그룹번호 {}", groupToUpdate.getArtGroupNo(), e);
	            response.put("status", "error");
	            response.put("message", "서버 오류로 인해 그룹 정보 업데이트에 실패했습니다: " + e.getMessage());
	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
			}
		}
}
