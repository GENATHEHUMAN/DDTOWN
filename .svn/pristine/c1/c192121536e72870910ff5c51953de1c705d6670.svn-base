<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>채팅방 목록</title>
    <style>
        /* 간단한 스타일 추가 */
        body { font-family: sans-serif; margin: 20px; }
        ul { list-style: none; padding: 0; }
        li {
            padding: 10px;
            margin-bottom: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer; /* 클릭 가능한 요소임을 표시 */
            background-color: #f9f9f9;
        }
        li:hover {
            background-color: #e9e9e9;
        }
        .no-rooms {
            color: #888;
            font-style: italic;
        }
    </style>
</head>
<body>
    <h1>채팅방 목록</h1>
    <ul id="chatRoomList">
        </ul>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatRoomList = document.getElementById('chatRoomList');

            // 채팅방 목록 조회 함수
            function findAllRoom() {
                // 서버의 /chat/rooms 엔드포인트로 GET 요청을 보냅니다.
                fetch('/chat/dm/rooms')
                    .then(response => {
                        // 응답이 성공적(HTTP 200 OK)인지 확인합니다.
                        if (!response.ok) {
                            throw new Error('HTTP 오류! 상태: ' + response.status);
                        }
                        return response.json(); // JSON 형태로 응답을 파싱합니다.
                    })
                    .then(chatrooms => {
                        // 기존 목록을 비웁니다.
                        chatRoomList.innerHTML = ''; 

                        if (chatrooms.length === 0) {
                            // 채팅방이 없을 경우 메시지를 표시합니다.
                            const listItem = document.createElement('li');
                            listItem.textContent = '개설된 채팅방이 없습니다.';
                            listItem.classList.add('no-rooms');
                            chatRoomList.appendChild(listItem);
                        } else {
                            // 각 채팅방 정보를 순회하며 목록에 추가합니다.
                            chatrooms.forEach(item => {
                                const listItem = document.createElement('li');
                                // 채팅방 번호와 타입 코드를 표시합니다.
                                listItem.textContent = `채널 번호: \${item.chatChannelNo}, 타입: \${item.chatTypeCode}`;
                                listItem.addEventListener('click', () => enterRoom(item.chatChannelNo));
                                chatRoomList.appendChild(listItem);
                            });
                        }
                    })
                    .catch(error => {
                        // 오류가 발생하면 콘솔에 기록하고 사용자에게 알립니다.
                        console.error("채팅방 목록을 가져오는 데 실패했습니다:", error);
                        alert("채팅방 목록을 가져오는 중 오류가 발생했습니다: " + error.message);
                    });
            }
            
            // 채팅방 입장 함수
            function enterRoom(chatChannelNo) {
            	const username = prompt('대화명을 입력해 주세요.');
            	
            	// 대화명이 유효한지 확인
            	if(username != null && username.trim() !== '') {
            		// 대화명과 채널 번호를 local에 저장
            		localStorage.setItem('wschat.username', username);
            		localStorage.setItem('wschat.chatChannelNo', chatChannelNo);
            		
            		// roomdetail.jsp로 이동
            		location.href = `/chat/dm/room/enter/\${chatChannelNo}`;
            	} else if(username == null) {
            		alert("대화명 입력이 취소되었습니다.");
            	} else {
            		alert("대화명을 입력해주세요.");
            	}
            }
            // 페이지 로드 시 채팅방 목록을 즉시 불러옵니다.
            findAllRoom();
        });
    </script>
</body>
</html>