package kr.or.ddit.ddtown.controller.chat.dm;

import java.security.Principal;
import java.util.Collection;
import java.util.Date;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.simp.SimpMessageSendingOperations;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Controller;

import kr.or.ddit.ddtown.service.chat.dm.IChatChannelService;
import kr.or.ddit.ddtown.service.chat.dm.IChatMessageService;
import kr.or.ddit.vo.chat.dm.ChatChannelVO;
import kr.or.ddit.vo.chat.dm.ChatMessageVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Controller
public class DMChatMessageController {
	
	private final SimpMessageSendingOperations messagingTemplate;
	private final IChatMessageService chatMessageService;
	private final IChatChannelService chatChannelService;
	
	@MessageMapping("/chat/dm/message")
	@PreAuthorize("hasAnyRole('ARTIST', 'MEMBERSHIP', 'EMPLOYEE', 'ADMIN')")
	public void processMessage(@Payload ChatMessageVO message, Principal principal) {
		
		// 1. 현재 로그인한 사용자 정보 가져오기
		String currentUser = principal.getName();
		log.info("name : {}", currentUser);
		
		// 발신자 프로필 번호 가져오기
		int comuProfileNo = chatChannelService.getComuProfileNoForChatChannel(message.getChatChannelNo(), currentUser);
		
		if(comuProfileNo == -1) {
			log.warn("Invalid comuProfileNo for user {}", comuProfileNo);
			return;
		}
		
		// 권한 확인
		Authentication authentication = null;
		if(principal instanceof Authentication) {
			authentication = (Authentication) principal;
		}
		Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
		log.info("authorities: {}", authorities);
		
		// 발신자가 아티스트인지 확인
		boolean isUsernameArtist = authorities.stream()
											  .anyMatch(a -> a.getAuthority().equals("ROLE_ARTIST"));
		
		// 발신자가 멤버십회원인지 확인
		boolean isUsernameMembership = authorities.stream()
				  .anyMatch(a -> a.getAuthority().equals("ROLE_MEMBERSHIP"));
		
		
		// 2. 메세지 전송 시각 및 발신자 설정
		message.setChatSendDate(new Date());
		message.setUsername(currentUser);
		message.setComuProfileNo(comuProfileNo);
		
		// 3. 메세지 타입 코드 설정
		if(ChatMessageVO.MessageType.TALK.equals(message.getType())) {
			message.setChatMsgTypeCode("CMTC001");	// 일반 메세지 타입
		} else if(ChatMessageVO.MessageType.FILE.equals(message.getType())) {
			message.setChatMsgTypeCode("CMTC002");	// 첨부 파일 타입
		} else {
			message.setChatMsgTypeCode("CMTC001");
		}
		
		try {
			// 4. 메세지 전송 로직
			sendMessageToRecipients(message, isUsernameArtist, isUsernameMembership);
			
			// 5. 모든 메세지 db에 저장
			chatMessageService.saveMessage(message);
			
			// 6. 채널 마지막 메세지 일자 업데이트
			chatChannelService.updateChatLastDate(message.getChatChannelNo());
			System.out.println("message db 저장 완료 : " + message.getChatContent());
			
		} catch (Exception e) {
			System.err.println("message db 저장 실패 : " + e.getMessage());
		}
	}
		
	private void sendMessageToRecipients(ChatMessageVO message, boolean isUsernameArtist,
			boolean isUsernameMembership) {
		// 1. 아티스트가 보낸 메세지일 경우
		if(isUsernameArtist) {
			messagingTemplate.convertAndSend("/sub/chat/dm/channel/" + message.getChatChannelNo(), message);
			System.out.println("아티스트 (" + message.getUsername() + ") -> 모든 회원 메시지 전송: " + message.getChatContent());
		} else if(isUsernameMembership) {
			// 2. 멤버십 회원이 보낸 메세지일 경우
			ChatChannelVO chatChannelInfo = chatChannelService.findChatChannelWithArtistInfo(message.getChatChannelNo());
			String artistUser = null;
			
			if(chatChannelInfo != null) {
				artistUser = chatChannelInfo.getArtistUsername();
			}
			
			if(artistUser != null) {
				// 아티스트에게 전송
				messagingTemplate.convertAndSendToUser(artistUser, "/queue/messages", message);
				System.out.println("회원 (" + message.getUsername() + ") -> 아티스트 (" + artistUser + ") 메시지 전송: " + message.getChatContent());
			
				// 본인에게도 재전송하여 채팅방에 표시
				messagingTemplate.convertAndSendToUser(message.getUsername(), "/queue/messages", message);
				
			} else {
				System.err.println("오류: chatChannelNo " + message.getChatChannelNo() + "에 해당하는 아티스트를 찾을 수 없습니다.");
			}
		}
	}
}
