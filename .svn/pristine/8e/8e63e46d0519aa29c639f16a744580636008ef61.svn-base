package kr.or.ddit.ddtown.controller.admin.notice;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ddtown.service.admin.notice.AdminNoticeService;
import kr.or.ddit.vo.corporate.notice.NoticeVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/admin/notice")
public class AdminNoticeController {
	
	@Autowired
	private AdminNoticeService noticeService;
	
	@GetMapping("/list")
	public String noticeList(Model model) {
		log.info("관리자 공지사항 목록 요청");
		
		List<NoticeVO> list = noticeService.getList();
		model.addAttribute("noticeList", list);
		
		return "admin/notice/noticeList";
	}
	
	@GetMapping("/detail")
	public String noticeDetail(@RequestParam int id, Model model) {
		log.info("관리자 공지사항 상세 조회");
		
		NoticeVO noticeVO = null;
		noticeVO = noticeService.getDetail(id);
		model.addAttribute("noticeVO",noticeVO);
		
		return "admin/notice/noticeDetail";
	}
	
	@GetMapping("/register")
	public String noticeRegisterForm(Model model) {
		log.info("관리자 공지사항 등록 폼 요청");
		model.addAttribute("noticeVO", new NoticeVO());
		model.addAttribute("mode", "new");
		
		return "admin/notice/noticeForm";
	}
	
	@GetMapping("/form")
	public String noticeUpdateForm(@RequestParam int id, Model model) {
		log.info("관리자 공지사항 수정 폼 요청");
		
		NoticeVO noticeVO = noticeService.getDetail(id);
		model.addAttribute("noticeVO",noticeVO);
		model.addAttribute("mode", "edit");
		
		return "admin/notice/noticeForm";
	}
	
	/*
	 * 게시글 저장 ( 신규, 수정 )
	 * NoviceVO의 entNotiNo 값 0이면 등록, 아니면 수정 
	 */
	@PostMapping("/save")
	public String noticeSave(NoticeVO noticeVO, RedirectAttributes ra) {
		String empUsername = SecurityContextHolder.getContext().getAuthentication().getName();
		noticeVO.setEmpUsername(empUsername);
		
		boolean isNew = (noticeVO.getEntNotiNo() == 0);
		String sucessRedirectUrl;
		
		if(isNew) {
			log.info("새 공지 등록 요청..!");
			noticeService.createNotice(noticeVO);
			ra.addFlashAttribute("msg", "등록이 완료되었습니다!");
			sucessRedirectUrl = "redirect:/admin/notice/list";
		} else {
			log.info("공지 수정 요청..! (ID: {})", noticeVO.getEntNotiNo());
			noticeService.modifyNotice(noticeVO);
			ra.addFlashAttribute("msg", "수정이 완료되었습니다!");
			sucessRedirectUrl = "redirect:/admin/notice/detail?id=" + noticeVO.getEntNotiNo();
		}
		
		return sucessRedirectUrl;
	}

	
//	// 검색	
//	@GetMapping("/search")
//	public String searchKeyword(@ModelAttribute("searchVO") NoticeSearchVO searchVO, Model model) {
//		log.info("searchKeyword() 실행..!!");
//		
//		List<NoticeVO> list = noticeService.searchKeyword(searchVO);
//		model.addAttribute("noticeList", list);
//		
//		return "corporate/notice/noticeList";
//	}
}
