package kr.or.ddit.config.websocket;

import org.springframework.stereotype.Component;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.ddtown.service.chat.dm.ChatService;
import kr.or.ddit.vo.chat.dm.ChatMessageVO;
import kr.or.ddit.vo.chat.dm.ChatRoomVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Component
public class WebSocketChatHandler extends TextWebSocketHandler {
	private final ObjectMapper objectMapper;
	private final ChatService chatService;
	
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		String payload = message.getPayload();
		log.info("payload: {}", payload);
		
		ChatMessageVO chatMessage = objectMapper.readValue(payload, ChatMessageVO.class);
		
		int chatChannelNo = chatMessage.getChatChannelNo();
		ChatRoomVO room = chatService.findRoomByChannelNo(chatChannelNo);
		
		if (room == null) {
	        log.warn("채팅방을 찾을 수 없습니다. chatChannelNo: {}", chatChannelNo);
	        session.sendMessage(new TextMessage("Error: Chat room not found."));
	        return;
	    }
	}
}
