package kr.or.ddit.ddtown.service.admin.group;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.mapper.admin.artist.IAdminArtistMapper;
import kr.or.ddit.ddtown.mapper.admin.group.IAdminArtistGroupMapper;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.artist.AlbumVO;
import kr.or.ddit.vo.artist.ArtistGroupVO;
import kr.or.ddit.vo.artist.ArtistVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class AdminArtistGroupServiceImpl implements IAdminArtistGroupService {

	@Value("${kr.or.ddit.upload.path}")
	private String uploadPath;
	
	@Autowired
	private IAdminArtistGroupMapper artistGroupMapper;

	@Autowired
	private IAdminArtistMapper artistMapper;
	
	/**
	 * 페이징 처리된 총 레코드 수 가져오기
	 */
	@Override
	public int getTotalRecord(PaginationInfoVO<ArtistGroupVO> pagingVO) {
		return artistGroupMapper.getTotalRecord(pagingVO);
	}

	/**
	 * 페이징 처리된 그룹 리스트 가져오기
	 */
	@Override
	public List<ArtistGroupVO> getGroupList(PaginationInfoVO<ArtistGroupVO> pagingVO) {
		return artistGroupMapper.getGroupList(pagingVO);
	}

	/**
	 *	해당 그룹번호를 통해 그룹 상세정보 가져오기
	 */
	@Override
	public ArtistGroupVO getGroupDetail(int artGroupNo) {
		ArtistGroupVO groupVO = artistGroupMapper.getGroupDetailWithArtist(artGroupNo);
		List<AlbumVO> albumVO = artistGroupMapper.getAlbumList(artGroupNo);
		groupVO.setAlbumList(albumVO);
		return groupVO;
	}

	/**
	 *	그룹 추가 수정시 그룹에 속해있지않은 앨범리스트를 가져온다.
	 */
	@Override
	public List<AlbumVO> getAlbumListAll() {
		return artistGroupMapper.getAlbumListAll();
	}

	/**
	 *	그룹 정보 수정
	 */
	@Transactional
	@Override
	public ServiceResult updateGroup(ArtistGroupVO groupVO) {
		ServiceResult result = null;
		// 프로필 이미지 처리
		MultipartFile img = groupVO.getProfileImage();
		if(img != null && StringUtils.isNotBlank(img.getOriginalFilename())) {
			// 처리전 기존 이미지파일 삭제 
			try {
				String savePath = groupVO.getArtGroupProfileImg();
				log.info(savePath);
				if(StringUtils.isNotBlank(savePath)) {
					savePath = savePath.replace("/upload", uploadPath);
					log.info("파일경로 -> :" + savePath);
					
					File file = new File(savePath);
					if(file.exists()) {
						log.info("파일 존재함");
						file.delete();
					}
				}
				// 새로운 이미지 경로
				String imgUrl = uploadImg(img);
				groupVO.setArtGroupProfileImg(imgUrl);
			} catch (IllegalStateException | IOException e) {
				return ServiceResult.FAILED;
			}
		}
		// 아티스트 멤버 삭제 처리 // artist_group_map 에서 del_yn y처리
		if(groupVO.getRemoveArtists() != null) {
			for(int artNo : groupVO.getRemoveArtists()) {
				int artGroupNo = groupVO.getArtGroupNo();
				ArtistVO artVO = new ArtistVO();
				artVO.setArtNo(artNo);
				artVO.setArtGroupNo(artGroupNo);
				artistMapper.deleteArtGroup(artVO);
			}
		}
		// 앨범 삭제 처리
		if(groupVO.getRemoveAlbums() != null) {
			for(int albumNo : groupVO.getRemoveAlbums()) {
				artistGroupMapper.deleteAlbumGroup(albumNo);
			}			
		}
		// 아티스트 추가 처리
		if(groupVO.getAddArtists() != null) {
			for(int artNo : groupVO.getAddArtists()) {
				ArtistVO artVO = new ArtistVO();
				artVO.setArtGroupNo(groupVO.getArtGroupNo());
				artVO.setArtNo(artNo);
				int checkFlag = artistMapper.checkArtGroup(artVO);
				if(checkFlag > 0) {
					artistMapper.updateArtistGroupDelYn(artVO);
				}else {
					artistMapper.insertArtistGroupMap(artVO);
					
				}
			}			
		}
		// 앨범 추가 처리
		if(groupVO.getAlbumList() != null) {
			for(int albumNo : groupVO.getAddAlbums()) {
				AlbumVO albumVO = new AlbumVO();
				albumVO.setArtGroupNo(groupVO.getArtGroupNo());
				albumVO.setAlbumNo(albumNo);
				int checkFlag = artistGroupMapper.checkAlbumGroupNo(albumVO);
				if(!(checkFlag > 0)) {
					artistGroupMapper.insertArtistGroupNo(albumVO);
				}
			}			
		}
		
		// 아티스트 그룹 변경
		int status = artistGroupMapper.updateGroup(groupVO);
		result = status > 0 ? ServiceResult.OK : ServiceResult.FAILED;
		return result;
	}

	
	
	/**
	 * 이미지 업로드 및 세이브경로 반환
	 * @param img
	 * @return 세이브 경로 반환
	 * @throws IllegalStateException
	 * @throws IOException
	 */
	private String uploadImg(MultipartFile img) throws IllegalStateException, IOException {
		String savePath = uploadPath + "/profile/group";
		File file = new File(savePath);
		if(!file.exists()) {
			file.mkdirs();
		}
		
		if(StringUtils.isNotBlank(img.getOriginalFilename())) {
			savePath += "/" + img.getOriginalFilename();
			img.transferTo(new File(savePath));
		}
		return savePath.replace("C:", "");
		
	}
}
