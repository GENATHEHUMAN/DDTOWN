<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="jakarta.tags.core" prefix="c" %>
<%@ taglib uri="jakarta.tags.fmt" prefix="fmt" %>
<%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec" %>

<sec:authentication property="principal.username" var="currentUsername"/>
<c:set var="isUserLoggedIn" value="${not empty currentUsername && currentUsername ne 'anonymousUser'}"/>

<style>
    .alert-icon-container { 
        position: relative;
        display: inline-block;
        margin-left: 15px;
    }
    .alert-bell { 
        font-size: 1.5em;
        color: #333;
        cursor: pointer;
    }
    .alert-badge { 
        position: absolute;
        top: -5px;
        right: -8px;
        background-color: red;
        color: white;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 0.7em;
        font-weight: bold;
        display: none;
    }
    .alert-dropdown { 
        display: none;
        position: absolute;
        top: 100%;
        right: 0;
        background-color: white;
        border: 1px solid #ddd;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        width: 300px;
        max-height: 400px;
        overflow-y: auto;
        z-index: 1000;
    }
    .alert-dropdown-header { 
        padding: 10px;
        font-weight: bold;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .alert-dropdown-header a {
        font-size: 0.9em;
        color: #007bff;
        text-decoration: none;
    }
    .alert-item { 
        padding: 10px;
        border-bottom: 1px solid #eee;
        font-size: 0.9em;
        cursor: pointer;
    }
    .alert-item:last-child {
        border-bottom: none;
    }
    .alert-item.unread {
        background-color: #f8f9fa;
    }
    .alert-item:hover {
        background-color: #e9ecef;
    }
    .alert-item .message { 
        display: block;
        margin-bottom: 5px;
        color: #333;
    }
    .alert-item .timestamp { 
        font-size: 0.8em;
        color: #777;
    }
    .no-alerts { 
        padding: 20px;
        text-align: center;
        color: #888;
    }
</style>

<c:if test="${isUserLoggedIn}">
    <div class="alert-icon-container">
        <span class="alert-bell" id="alertBellIcon">🔔</span>
        <span class="alert-badge" id="alertBadge">0</span>
        <div class="alert-dropdown" id="alertDropdownList">
            <div class="alert-dropdown-header">
                <span>알림</span>
                <a href="<c:url value='/mypage/alerts'/>" id="viewAllAlertsLink">모두 보기</a>
            </div>
            <div id="alertItemsContainer">
                <div class="no-alerts">새로운 알림이 없습니다.</div>
            </div>
        </div>
    </div>
</c:if>


<script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.1/sockjs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

<script type="text/javascript">
$(document).ready(function() {
    const csrfToken = $("meta[name='_csrf']").attr("content");
    const csrfHeader = $("meta[name='_csrf_header']").attr("content");

    const alertBellIcon = $('#alertBellIcon');
    const alertBadge = $('#alertBadge');
    const alertDropdownList = $('#alertDropdownList');
    const alertItemsContainer = $('#alertItemsContainer');
    
    const currentUsername = "<c:out value='${currentUsername}'/>"; 
    const isUserLoggedIn = ${isUserLoggedIn};

    if (!isUserLoggedIn || !currentUsername) {
        console.log("사용자가 로그인하지 않았거나 사용자 ID를 가져올 수 없어 알림 기능을 초기화하지 않습니다.");
        return;
    }

    let stompClient = null;
    let unreadAlertCount = 0;

    function loadInitialAlerts() { 
        $.ajax({
            url: '<c:url value="/mypage/alerts/latestAndUnreadCnt"/>', 
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    unreadAlertCount = response.unreadCnt || 0;
                    updateAlertBadge(unreadAlertCount); 
                    if (response.alerts && response.alerts.length > 0) { 
                        alertItemsContainer.empty();
                        response.alerts.forEach(function(alertData) { 
                            prependAlertToList(alertData); 
                        });
                    } else {
                        alertItemsContainer.html('<div class="no-alerts">새로운 알림이 없습니다.</div>');
                    }
                } else {
                    console.error("초기 알림 로드 실패:", response.message);
                }
            },
            error: function(xhr) {
                console.error("초기 알림 로드 중 오류 발생:", xhr.responseText);
            }
        });
    }

    function updateAlertBadge(count) { 
        unreadAlertCount = count;
        if (unreadAlertCount > 0) {
            alertBadge.text(unreadAlertCount > 99 ? "99+" : unreadAlertCount).show();
        } else {
            alertBadge.hide();
        }
    }

    function prependAlertToList(alertData) { 
        if (alertItemsContainer.find('.no-alerts').length > 0) {
            alertItemsContainer.empty();
        }

        // WebSocket으로 오는 새 알림은 기본값 안읽음 'N'
        const isUnread = alertData.alertReadYn === 'N' || alertData.alertReadYn === false || typeof alertData.alertReadYn === 'undefined';
        
        const itemHtml = `
            <div class="alert-item \${isUnread ? 'unread' : 'read'}" data-alert-no="\${alertData.alertNo}"> 
                <div class="alert-content"> 
                    <span class="message">\${alertData.alertContent || '새로운 알림'}</span>
                    <span class="timestamp">\${formatAlertTimestamp(alertData.alertCreateDate)}</span> 
                </div>
            </div>
        `;
        const newItem = $(itemHtml);

        if (alertData.alertUrl) {
            newItem.on('click', function() {
                markAlertAsRead($(this).data('alertNo'), $(this)); 
                window.location.href = "<c:url value='/'/>" + alertData.alertUrl.replace(/^\//, '');
            });
        } else {
             newItem.on('click', function() { 
                markAlertAsRead($(this).data('alertNo'), $(this)); 
            });
        }
        alertItemsContainer.prepend(newItem);
    }
    
    function formatAlertTimestamp(timestamp) { 
        if (!timestamp) return "";
        const date = new Date(timestamp); 
        const now = new Date();
        const diffMs = now - date;
        const diffSeconds = Math.round(diffMs / 1000);
        const diffMinutes = Math.round(diffSeconds / 60);
        const diffHours = Math.round(diffMinutes / 60);
        const diffDays = Math.round(diffHours / 24);

        if (diffSeconds < 60) return "방금 전";
        if (diffMinutes < 60) return `\${diffMinutes}분 전`;
        if (diffHours < 24) return `\${diffHours}시간 전`;
        if (diffDays < 7) return `\${diffDays}일 전`;
        return `\${date.getFullYear()}-\${String(date.getMonth() + 1).padStart(2, '0')}-\${String(date.getDate()).padStart(2, '0')}`;
    }

    function markAlertAsRead(alertNo, itemElement) { 
        if (!itemElement || !itemElement.hasClass('unread')) return;

        $.ajax({
            url: '<c:url value="/mypage/alerts/read"/>', 
            type: 'POST',
            data: { alertNo: alertNo }, 
            headers: csrfHeader && csrfToken ? { [csrfHeader]: csrfToken } : {},
            success: function(response) {
                if (response.success) {
                    itemElement.removeClass('unread').addClass('read');
                    unreadAlertCount = Math.max(0, unreadAlertCount - 1);
                    updateAlertBadge(unreadAlertCount); // 변경
                } else {
                    console.warn("알림 읽음 처리 실패(서버):", response.message);
                }
            },
            error: function(xhr) {
                console.error("알림 읽음 처리 중 오류:", xhr.responseText);
            }
        });
    }

    function connectWebSocket() {
        const socket = new SockJS('<c:url value="/ws-stomp"/>');
        stompClient = Stomp.over(socket);
        
        stompClient.connect({}, function (frame) { 
            console.log('STOMP Connected: ' + frame);
            stompClient.subscribe('/user/' + currentUsername + '/queue/alert', function (alertMessage) { 
                try {
                    const newAlert = JSON.parse(alertMessage.body); 
                    console.log("새 알림 수신:", newAlert);
                    prependAlertToList(newAlert); 
                    updateAlertBadge(++unreadAlertCount); 
                    if (Notification && Notification.permission === "granted") { // 브라우저 알림 API 사용 시 Notification 객체 확인
                        new Notification("새 알림 from DDTOWN", { body: newAlert.alertContent });
                    }
                } catch (e) {
                    console.error("알림 메시지 파싱 오류:", e, alertMessage.body);
                }
            });
        }, function(error) {
            console.error('STOMP 연결 오류: ' + error);
            setTimeout(connectWebSocket, 5000);
        });
    }

    alertBellIcon.on('click', function(event) {
        event.stopPropagation();
        alertDropdownList.toggle();
    });

    $(document).on('click', function(event) {
        if (!alertBellIcon.is(event.target) && alertDropdownList.has(event.target).length === 0) {
            alertDropdownList.hide();
        }
    });
    
    function requestBrowserNotificationPermission() { 
        if (typeof Notification !== 'undefined' && Notification.permission !== "granted" && Notification.permission !== "denied") {
            Notification.requestPermission().then(function (permission) {
                if (permission === "granted") {
                    console.log("브라우저 알림 권한 허용됨");
                } else {
                    console.log("브라우저 알림 권한 거부됨");
                }
            });
        }
    }

    if (isUserLoggedIn) {
        requestBrowserNotificationPermission(); 
        loadInitialAlerts();    
        connectWebSocket();
    }
});
</script>